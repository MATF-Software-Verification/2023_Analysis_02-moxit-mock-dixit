--------------------------------------------------------------------------------
I1 cache:         65536 B, 64 B, 2-way associative
D1 cache:         65536 B, 64 B, 2-way associative
LL cache:         262144 B, 64 B, 8-way associative
Command:          ./../backend/build/moxit-backend
Data file:        cachegrind.out.7004
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     I1mr               ILmr             Dr                   D1mr             DLmr             Dw                   D1mw             DLmw             
--------------------------------------------------------------------------------
1,535,178,080 (100.0%) 5,013,337 (100.0%) 339,859 (100.0%) 469,534,121 (100.0%) 873,113 (100.0%) 230,316 (100.0%) 212,242,400 (100.0%) 547,324 (100.0%) 204,760 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                   I1mr               ILmr            Dr                   D1mr             DLmr            Dw                  D1mw             DLmw              file:function
--------------------------------------------------------------------------------
386,398,612 (25.17%)     5,421 ( 0.11%)    214 ( 0.06%) 139,215,189 (29.65%)   6,959 ( 0.80%)  2,454 ( 1.07%) 30,626,494 (14.43%)      13 ( 0.00%)       0           /home/andrijanabos/Desktop/02-moxit-mock-dixit/backend/src/lib/server/moxit_server.cpp:MoxitServer::startWorkerThread()
204,502,003 (13.32%) 1,532,539 (30.57%) 70,341 (20.70%)  55,715,269 (11.87%) 322,996 (36.99%) 73,622 (31.97%) 19,999,823 ( 9.42%)  64,164 (11.72%)     810 ( 0.40%)  ???:???
201,166,206 (13.10%)     3,915 ( 0.08%)    622 ( 0.18%)  79,066,104 (16.84%)       0               0          48,570,039 (22.88%)       0                0           /home/andrijanabos/Desktop/02-moxit-mock-dixit/backend/src/lib/server/moxit_server.cpp:MoxitServer::writeToClient(HttpStatus*)
 79,654,216 ( 5.19%)    11,207 ( 0.22%)  3,431 ( 1.01%)  24,109,513 ( 5.13%)  33,451 ( 3.83%)  4,133 ( 1.79%) 12,316,226 ( 5.80%)   2,058 ( 0.38%)     388 ( 0.19%)  ./malloc/./malloc/malloc.c:_int_free
 59,018,049 ( 3.84%)       783 ( 0.02%)      1 ( 0.00%)   9,836,341 ( 2.09%)       0               0                   0                0                0           ./socket/../sysdeps/unix/sysv/linux/send.c:send
 38,435,359 ( 2.50%)    11,949 ( 0.24%)    498 ( 0.15%)   9,824,560 ( 2.09%) 113,710 (13.02%)  8,230 ( 3.57%)  5,310,211 ( 2.50%)     409 ( 0.07%)      12 ( 0.01%)  ./malloc/./malloc/malloc.c:malloc
 38,156,232 ( 2.49%)     9,947 ( 0.20%)  1,615 ( 0.48%)  18,807,513 ( 4.01%)  43,967 ( 5.04%)  1,236 ( 0.54%) 17,238,680 ( 8.12%) 352,358 (64.38%) 171,020 (83.52%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms
 33,578,566 ( 2.19%)     1,515 ( 0.03%)    587 ( 0.17%)   4,796,938 ( 1.02%)       0               0                   0                0                0           ./misc/../sysdeps/unix/syscall-template.S:epoll_ctl
 33,303,898 ( 2.17%)   108,505 ( 2.16%)    582 ( 0.17%)   3,108,320 ( 0.66%)       9 ( 0.00%)      1 ( 0.00%)  6,168,955 ( 2.91%)   8,033 ( 1.47%)   1,673 ( 0.82%)  ???:QArrayData::allocate(unsigned long, unsigned long, unsigned long, QFlags<QArrayData::AllocationOption>)
 29,270,677 ( 1.91%)   140,652 ( 2.81%)  3,867 ( 1.14%)   6,283,362 ( 1.34%)  41,419 ( 4.74%) 14,276 ( 6.20%)  3,734,755 ( 1.76%)  25,981 ( 4.75%)   9,077 ( 4.43%)  ./malloc/./malloc/malloc.c:_int_malloc
 25,243,798 ( 1.64%)     3,177 ( 0.06%)    294 ( 0.09%)  10,328,676 ( 2.20%)   4,916 ( 0.56%)     37 ( 0.02%)  2,867,167 ( 1.35%)   5,479 ( 1.00%)   1,713 ( 0.84%)  ???:QByteArray::append(QByteArray const&)
 22,222,850 ( 1.45%)    91,254 ( 1.82%)  5,756 ( 1.69%)   2,127,014 ( 0.45%)   1,053 ( 0.12%)    216 ( 0.09%)  1,908,510 ( 0.90%)   2,541 ( 0.46%)     118 ( 0.06%)  ???:double_conversion::FastDtoa(double, double_conversion::FastDtoaMode, int, double_conversion::Vector<char>, int*, int*)
 21,732,673 ( 1.42%)    46,085 ( 0.92%)    283 ( 0.08%)   6,266,542 ( 1.33%)     476 ( 0.05%)      0           2,675,617 ( 1.26%)   1,373 ( 0.25%)     228 ( 0.11%)  ???:QByteArray::resize(int)
 19,549,524 ( 1.27%)   318,492 ( 6.35%)     54 ( 0.02%)   7,108,806 ( 1.51%)  18,340 ( 2.10%)  6,191 ( 2.69%)  3,554,280 ( 1.67%)     103 ( 0.02%)       1 ( 0.00%)  ./malloc/./malloc/malloc.c:free
 17,799,355 ( 1.16%)     4,285 ( 0.09%)    507 ( 0.15%)   3,563,270 ( 0.76%)  10,114 ( 1.16%)  3,985 ( 1.73%)  2,292,868 ( 1.08%)   3,139 ( 0.57%)     605 ( 0.30%)  ./malloc/./malloc/malloc.c:_int_realloc
 17,262,399 ( 1.12%)   301,376 ( 6.01%)  1,117 ( 0.33%)   3,349,425 ( 0.71%)   2,247 ( 0.26%)    246 ( 0.11%)  1,803,541 ( 0.85%)   4,999 ( 0.91%)      19 ( 0.01%)  ./malloc/./malloc/malloc.c:realloc
 15,377,850 ( 1.00%)   137,445 ( 2.74%)      2 ( 0.00%)   1,025,190 ( 0.22%)       0               0                   0                0                0           ???:qCalculateBlockSize(unsigned long, unsigned long, unsigned long)
 14,756,865 ( 0.96%)       785 ( 0.02%)    306 ( 0.09%)   9,837,910 ( 2.10%)   1,762 ( 0.20%)  1,037 ( 0.45%)          0                0                0           ???:std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::c_str() const
 12,816,508 ( 0.83%)     1,596 ( 0.03%)    853 ( 0.25%)   4,547,798 ( 0.97%)     546 ( 0.06%)      0           2,067,170 ( 0.97%)   4,470 ( 0.82%)   1,416 ( 0.69%)  ???:QByteArray::append(char)
 12,476,557 ( 0.81%)     2,349 ( 0.05%)  1,561 ( 0.46%)   3,921,837 ( 0.84%)     308 ( 0.04%)      7 ( 0.00%)  1,782,179 ( 0.84%)      45 ( 0.01%)       0           ???:QByteArray::append(char const*)
 11,936,264 ( 0.78%)    99,071 ( 1.98%)    536 ( 0.16%)   1,884,888 ( 0.40%)   1,189 ( 0.14%)    568 ( 0.25%)  2,198,696 ( 1.04%)   1,400 ( 0.26%)     135 ( 0.07%)  ???:QString::fromLatin1_helper(char const*, int)
 10,206,724 ( 0.66%)     3,915 ( 0.08%)    534 ( 0.16%)   3,711,536 ( 0.79%)  58,162 ( 6.66%) 21,814 ( 9.47%)  1,159,855 ( 0.55%)     343 ( 0.06%)       0           ???:QCborValue::toString(QString const&) const
  8,918,840 ( 0.58%)   108,521 ( 2.16%)      1 ( 0.00%)     955,590 ( 0.20%)       0               0             955,590 ( 0.45%)     196 ( 0.04%)       0           ???:qCalculateGrowingBlockSize(unsigned long, unsigned long, unsigned long)
  6,698,822 ( 0.44%)       804 ( 0.02%)    205 ( 0.06%)   1,030,588 ( 0.22%)     217 ( 0.02%)      0           1,545,882 ( 0.73%)     101 ( 0.02%)       2 ( 0.00%)  ???:QArrayData::reallocateUnaligned(QArrayData*, unsigned long, unsigned long, QFlags<QArrayData::AllocationOption>)
  6,141,880 ( 0.40%)       784 ( 0.02%)    378 ( 0.11%)   1,228,376 ( 0.26%)       0               0                   0                0                0           ./misc/../sysdeps/unix/sysv/linux/epoll_wait.c:epoll_wait
  6,107,766 ( 0.40%)    49,152 ( 0.98%)      3 ( 0.00%)   1,784,554 ( 0.38%)      21 ( 0.00%)      0           1,270,184 ( 0.60%)     557 ( 0.10%)      21 ( 0.01%)  ???:QByteArray::reallocData(unsigned int, QFlags<QArrayData::AllocationOption>)
  5,788,864 ( 0.38%)   438,982 ( 8.76%)    703 ( 0.21%)     827,255 ( 0.18%)   8,055 ( 0.92%)  3,152 ( 1.37%)          0                0                0           ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2
  5,293,997 ( 0.34%)     5,481 ( 0.11%)    442 ( 0.13%)     780,121 ( 0.17%)     555 ( 0.06%)    501 ( 0.22%)    716,204 ( 0.34%)   6,997 ( 1.28%)      15 ( 0.01%)  ???:double_conversion::DoubleToStringConverter::DoubleToAscii(double, double_conversion::DoubleToStringConverter::DtoaMode, int, char*, int, bool*, int*, int*)
  5,178,096 ( 0.34%)    83,173 ( 1.66%)  1,629 ( 0.48%)   1,255,296 ( 0.27%)  11,641 ( 1.33%)     35 ( 0.02%)    941,472 ( 0.44%)     139 ( 0.03%)       0           ???:QByteArray::setNum(double, char, int)
  5,120,896 ( 0.33%)     2,374 ( 0.05%)     21 ( 0.01%)     931,072 ( 0.20%)       0               0           1,396,608 ( 0.66%)     435 ( 0.08%)      58 ( 0.03%)  ???:QByteArray::QByteArray(int, Qt::Initialization)
  4,920,664 ( 0.32%)    11,502 ( 0.23%)  2,536 ( 0.75%)   1,100,224 ( 0.23%)   2,777 ( 0.32%)    176 ( 0.08%)  1,046,999 ( 0.49%)      36 ( 0.01%)       0           ???:QCborValue::fromJsonValue(QJsonValue const&)
  4,747,893 ( 0.31%)    10,217 ( 0.20%)    712 ( 0.21%)   1,288,026 ( 0.27%)   1,045 ( 0.12%)      9 ( 0.00%)    872,742 ( 0.41%)   1,340 ( 0.24%)     651 ( 0.32%)  ???:QJsonObject::operator[](QStringView)
  4,660,043 ( 0.30%)     2,186 ( 0.04%)  1,239 ( 0.36%)   1,466,808 ( 0.31%)     311 ( 0.04%)      6 ( 0.00%)    887,504 ( 0.42%)   8,377 ( 1.53%)   2,864 ( 1.40%)  ???:QJsonArray::insert(int, QJsonValue const&)
  3,873,255 ( 0.25%)     1,591 ( 0.03%)    443 ( 0.13%)       7,291 ( 0.00%)       0               0                   0                0                0           ???:QArrayData::deallocate(QArrayData*, unsigned long, unsigned long)
  3,765,888 ( 0.25%)     3,132 ( 0.06%)    282 ( 0.08%)   1,098,384 ( 0.23%)       0               0             784,560 ( 0.37%)       0                0           ???:QString::toLatin1_helper_inplace(QString&)
  3,523,488 ( 0.23%)    39,839 ( 0.79%)    398 ( 0.12%)     587,248 ( 0.13%)   2,356 ( 0.27%)  1,239 ( 0.54%)    220,218 ( 0.10%)       0                0           ???:double_conversion::PowersOfTenCache::GetCachedPowerForBinaryExponentRange(int, int, double_conversion::DiyFp*, int*)
  3,291,935 ( 0.21%)     1,653 ( 0.03%)    626 ( 0.18%)   2,215,657 ( 0.47%)   2,770 ( 0.32%)    227 ( 0.10%)    485,357 ( 0.23%)       0                0           ???:QCborValue::dispose()
  2,699,316 ( 0.18%)     2,421 ( 0.05%)  1,770 ( 0.52%)     404,570 ( 0.09%)       7 ( 0.00%)      3 ( 0.00%)          0                0                0           ???:QJsonValue::type() const
  2,665,710 ( 0.17%)         0               0                    0                0               0                   0                0                0           ./malloc/./malloc/arena.c:free
  2,521,622 ( 0.16%)     2,349 ( 0.05%)     18 ( 0.01%)     569,348 ( 0.12%)       0               0             651,019 ( 0.31%)     229 ( 0.04%)      11 ( 0.01%)  ???:QByteArray::QByteArray(int, char)
  2,309,786 ( 0.15%)     7,432 ( 0.15%)  2,692 ( 0.79%)     702,786 ( 0.15%)       0               0             561,273 ( 0.26%)     541 ( 0.10%)      29 ( 0.01%)  /usr/include/c++/11/bits/basic_string.tcc:void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)
  2,093,412 ( 0.14%)    44,889 ( 0.90%) 14,258 ( 4.20%)     394,081 ( 0.08%)   5,081 ( 0.58%)  2,643 ( 1.15%)    464,623 ( 0.22%)       7 ( 0.00%)       2 ( 0.00%)  /home/andrijanabos/Desktop/02-moxit-mock-dixit/backend/src/lib/game/game.cpp:Game::toJson()
  2,046,174 ( 0.13%)     3,046 ( 0.06%)  1,131 ( 0.33%)     786,990 ( 0.17%)       8 ( 0.00%)      0             236,097 ( 0.11%)       0                0           ???:QString::operator=(QString const&)
  1,960,356 ( 0.13%)     1,700 ( 0.03%)     24 ( 0.01%)     714,844 ( 0.15%)  19,467 ( 2.23%) 11,853 ( 5.15%)    184,179 ( 0.09%)       0                0           ./malloc/./malloc/malloc.c:unlink_chunk.constprop.0
  1,846,271 ( 0.12%)     2,502 ( 0.05%)    192 ( 0.06%)     489,827 ( 0.10%)     105 ( 0.01%)      0             640,543 ( 0.30%)     153 ( 0.03%)      29 ( 0.01%)  ???:QCborValue::QCborValue(QStringView)
  1,804,329 ( 0.12%)     4,698 ( 0.09%)  2,435 ( 0.72%)     534,429 ( 0.11%)      36 ( 0.00%)      0             363,296 ( 0.17%)       0                0           ???:QJsonObject::setValueAt(int, QJsonValue const&)
  1,545,882 ( 0.10%)   238,829 ( 4.76%)     41 ( 0.01%)           0                0               0                   0                0                0           ./malloc/./malloc/arena.c:realloc

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/andrijanabos/Desktop/02-moxit-mock-dixit/backend/src/lib/server/moxit_server.cpp
--------------------------------------------------------------------------------
Ir                  I1mr           ILmr         Dr                  D1mr           DLmr           Dw                  D1mw         DLmw         

         .              .            .                   .              .              .                   .            .            .           #include "moxit_server.h"
         .              .            .                   .              .              .                   .            .            .           
         5 ( 0.00%)     0            0                   0              0              0                   2 ( 0.00%)   0            0           void log(const std::string &message) {
         9 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          3 ( 0.00%)     0              0                   2 ( 0.00%)   0            0               std::cout << message << std::endl;
         3 ( 0.00%)     0            0                   2 ( 0.00%)     0              0                   0            0            0           }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .           void closeWithError(const std::string &errorMessage) {
         .              .            .                   .              .              .                   .            .            .               log("Error: " + errorMessage);
         .              .            .                   .              .              .                   .            .            .               exit(EXIT_FAILURE);
         .              .            .                   .              .              .                   .            .            .           }
         .              .            .                   .              .              .                   .            .            .           
         8 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          0              0              0                   5 ( 0.00%)   0            0           MoxitServer::MoxitServer(std::string ip_address, int port)
         5 ( 0.00%)     0            0                   2 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               : m_ip_address(ip_address),
         3 ( 0.00%)     0            0                   2 ( 0.00%)     0              0                   1 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%)        m_port(port),
         2 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0                 m_socket(),
         3 ( 0.00%)     0            0                   1 ( 0.00%)     0              0                   2 ( 0.00%)   1 ( 0.00%)   1 ( 0.00%)        m_socketAddress(),
         2 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0                 m_socketAddress_length(sizeof(m_socketAddress)),
         2 ( 0.00%)     0            0                   1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0                 m_running(false),
         2 ( 0.00%)     0            0                   1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0                 m_epfd(),
     6,150 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          1 ( 0.00%)     0              0               2,048 ( 0.00%) 160 ( 0.03%) 151 ( 0.07%)        m_evlist(),
        22 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          6 ( 0.00%)     0              0                   6 ( 0.00%)   0            0                 m_numOfClients(0)
         .              .            .                   .              .              .                   .            .            .           {   
         2 ( 0.00%)     0            0                   1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               this->m_socketAddress.sin_family = AF_INET;
         6 ( 0.00%)     0            0                   2 ( 0.00%)     0              0                   2 ( 0.00%)   0            0               this->m_socketAddress.sin_port = htons(port);
         7 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          2 ( 0.00%)     0              0                   3 ( 0.00%)   0            0               this->m_socketAddress.sin_addr.s_addr = inet_addr(ip_address.c_str());
         .              .            .                   .              .              .                   .            .            .           
         3 ( 0.00%)     0            0                   0              0              0                   1 ( 0.00%)   0            0               signal(SIGPIPE, SIG_IGN);
         .              .            .                   .              .              .                   .            .            .           
         3 ( 0.00%)     0            0                   1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               this->startServer();
         4 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          3 ( 0.00%)     0              0                   0            0            0           }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .           MoxitServer::~MoxitServer() {
         .              .            .                   .              .              .                   .            .            .               this->closeServer();
         .              .            .                   .              .              .                   .            .            .           }
         .              .            .                   .              .              .                   .            .            .           
         9 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          1 ( 0.00%)     0              0                   4 ( 0.00%)   0            0           int MoxitServer::startServer() {
         6 ( 0.00%)     0            0                   1 ( 0.00%)     0              0                   2 ( 0.00%)   0            0               this->m_socket = socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, 0);
         4 ( 0.00%)     0            0                   2 ( 0.00%)     0              0                   0            0            0               if(this->m_socket < 0) {
         .              .            .                   .              .              .                   .            .            .                   closeWithError("Cannot create socket.");
         .              .            .                   .              .              .                   .            .            .                   return 1;
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
         1 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          0              0              0                   1 ( 0.00%)   0            0               const int opt = 1;
        12 ( 0.00%)     0            0                   2 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               if(setsockopt(m_socket, SOL_SOCKET, SO_REUSEADDR, (const char*) &opt, sizeof(opt)) < 0) {
         .              .            .                   .              .              .                   .            .            .                   closeWithError("Cannot set reuse address.");
         .              .            .                   .              .              .                   .            .            .                   return 1;
         .              .            .                   .              .              .                   .            .            .               }
        12 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          2 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               if(setsockopt(m_socket, SOL_SOCKET, SO_REUSEPORT, &opt, sizeof(opt)) < 0) {
         .              .            .                   .              .              .                   .            .            .                   closeWithError("Cannot set reuse port.");
         .              .            .                   .              .              .                   .            .            .                   return 1;
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
        12 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          5 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               if(bind(m_socket, (sockaddr*) &m_socketAddress, m_socketAddress_length) < 0) {
         .              .            .                   .              .              .                   .            .            .                   closeWithError("Cannot bind socket.");
         .              .            .                   .              .              .                   .            .            .                   return 1;
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
         1 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          0              0              0                   0            0            0               return 0;
         6 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          5 ( 0.00%)     0              0                   0            0            0           }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .           void MoxitServer::closeServer() {
         .              .            .                   .              .              .                   .            .            .               m_running = false;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .               for(int i = 0 ; i < k_threadPoolSize ; i++) {
         .              .            .                   .              .              .                   .            .            .                   //m_worker_threads[i].join();
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
-- line 67 ----------------------------------------
-- line 73 ----------------------------------------
         .              .            .                   .              .              .                   .            .            .                   close(m_clientSocketFds[i]);
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .               close(this->m_socket);
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .               exit(EXIT_SUCCESS);
         .              .            .                   .              .              .                   .            .            .           }
         .              .            .                   .              .              .                   .            .            .           
         9 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          1 ( 0.00%)     0              0                   4 ( 0.00%)   0            0           void MoxitServer::startListen() {
         3 ( 0.00%)     0            0                   1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               addHandlers();
         .              .            .                   .              .              .                   .            .            .           
         8 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          2 ( 0.00%)     1 ( 0.00%)     0                   1 ( 0.00%)   0            0               if(listen(m_socket, k_backlogSize) < 0) {
         .              .            .                   .              .              .                   .            .            .                   closeWithError("Cannot listen.");
         .              .            .                   .              .              .                   .            .            .                   exit(EXIT_FAILURE);
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
         3 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          0              0              0                   1 ( 0.00%)   0            0               std::ostringstream ss;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .               ss << "\n*** Listening on ADDRESS: "
         4 ( 0.00%)     0            0                   2 ( 0.00%)     1 ( 0.00%)     0                   1 ( 0.00%)   0            0                       << inet_ntoa(m_socketAddress.sin_addr)
        25 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          2 ( 0.00%)     1 ( 0.00%)     0                   5 ( 0.00%)   0            0                       << " PORT: " << ntohs(m_socketAddress.sin_port)
         4 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          0              0              0                   1 ( 0.00%)   0            0                       << " ***\n\n";
         .              .            .                   .              .              .                   .            .            .           
        11 ( 0.00%)     0            0                   0              0              0                   3 ( 0.00%)   0            0               log(ss.str());
         .              .            .                   .              .              .                   .            .            .           
         3 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               setUpEpoll();
         .              .            .                   .              .              .                   .            .            .           
         2 ( 0.00%)     0            0                   1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               m_running = true;
         .              .            .                   .              .              .                   .            .            .           
        13 ( 0.00%)     0            0                   7 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               for(int i = 0 ; i < k_threadPoolSize ; i++) {
         .              .            .                   .              .              .                   .            .            .                   //m_worker_threads.push_back(std::thread(&MoxitServer::startWorkerThread, this));
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
         3 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               startWorkerThread();
         .              .            .                   .              .              .                   .            .            .           }
         .              .            .                   .              .              .                   .            .            .           
         9 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          1 ( 0.00%)     0              0                   4 ( 0.00%)   0            0           void MoxitServer::setUpEpoll() {
         4 ( 0.00%)     0            0                   1 ( 0.00%)     0              0                   2 ( 0.00%)   1 ( 0.00%)   0               m_epfd = epoll_create(1024);
         4 ( 0.00%)     0            0                   2 ( 0.00%)     0              0                   0            0            0               if(m_epfd < 0) {
         .              .            .                   .              .              .                   .            .            .                   closeWithError("Epoll_create error.");
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
         2 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          0              0              0                   2 ( 0.00%)   0            0               struct epoll_event event{};
         1 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          0              0              0                   1 ( 0.00%)   0            0               event.events = EPOLLIN;
         3 ( 0.00%)     0            0                   2 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               event.data.fd = m_socket;
         .              .            .                   .              .              .                   .            .            .           
        11 ( 0.00%)     0            0                   4 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               if(epoll_ctl(m_epfd, EPOLL_CTL_ADD, m_socket, &event) < 0) {
         .              .            .                   .              .              .                   .            .            .                   closeWithError("Epoll_ctl error.");
         .              .            .                   .              .              .                   .            .            .               }
         7 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          5 ( 0.00%)     0              0                   0            0            0           }
         .              .            .                   .              .              .                   .            .            .           
     7,830 ( 0.00%)   616 ( 0.01%) 179 ( 0.05%)        783 ( 0.00%)     0              0               3,915 ( 0.00%)   0            0           int MoxitServer::acceptConnection() {
     1,566 ( 0.00%)   617 ( 0.01%)   2 ( 0.00%)          0              0              0               1,566 ( 0.00%)   0            0               sockaddr_in client = {};
       783 ( 0.00%)     0            0                   0              0              0                 783 ( 0.00%)   0            0               socklen_t len = sizeof(client);
         .              .            .                   .              .              .                   .            .            .           
     6,264 ( 0.00%)     0            0               1,566 ( 0.00%)     0              0               1,566 ( 0.00%)   0            0               int new_socket = accept4(m_socket, (sockaddr*) &client, &len, SOCK_NONBLOCK);
         .              .            .                   .              .              .                   .            .            .           
     1,566 ( 0.00%)   617 ( 0.01%)  12 ( 0.00%)        783 ( 0.00%)     0              0                   0            0            0               if(new_socket < 0) {
         .              .            .                   .              .              .                   .            .            .                   std::ostringstream ss;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   ss << "Server failed to accept incoming connection from ADDRESS: "
         .              .            .                   .              .              .                   .            .            .                   << inet_ntoa(m_socketAddress.sin_addr) << "; PORT: "
         .              .            .                   .              .              .                   .            .            .                   << ntohs(m_socketAddress.sin_port);
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   closeWithError(ss.str());
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
     2,349 ( 0.00%)   566 ( 0.01%)   1 ( 0.00%)          0              0              0               1,566 ( 0.00%)   0            0               struct epoll_event *event = new struct epoll_event;
         .              .            .                   .              .              .                   .            .            .           
     7,047 ( 0.00%)   617 ( 0.01%)  19 ( 0.01%)        783 ( 0.00%)     0              0               2,349 ( 0.00%)   0            0               HttpStatus *httpStatus = new HttpStatus(REQUEST_STATUS::Reading, new_socket);
         .              .            .                   .              .              .                   .            .            .           
     1,566 ( 0.00%)     0            0                 783 ( 0.00%)     0              0                 783 ( 0.00%)   0            0               event->events = EPOLLIN;
     2,349 ( 0.00%)     0            0               1,566 ( 0.00%)     0              0                 783 ( 0.00%)   0            0               event->data.ptr = static_cast<void*>(httpStatus);
         .              .            .                   .              .              .                   .            .            .           
     7,830 ( 0.00%)   617 ( 0.01%)   1 ( 0.00%)      3,132 ( 0.00%)     0              0                 783 ( 0.00%)   0            0               if(epoll_ctl(m_epfd, EPOLL_CTL_ADD, new_socket, event) < 0) {
         .              .            .                   .              .              .                   .            .            .                   closeWithError("Epoll_ctl error.");
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
       783 ( 0.00%)   617 ( 0.01%)  18 ( 0.01%)        783 ( 0.00%)     0              0                   0            0            0               return new_socket;
     6,264 ( 0.00%) 1,233 ( 0.02%)   1 ( 0.00%)      4,698 ( 0.00%)     0              0                   0            0            0           }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .           
         9 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          1 ( 0.00%)     0              0                   4 ( 0.00%)   0            0           void MoxitServer::startWorkerThread() {
 2,456,753 ( 0.16%)     1 ( 0.00%)   1 ( 0.00%)  1,228,376 ( 0.26%)     1 ( 0.00%)     0                   0            0            0               while(m_running) {
 5,527,692 ( 0.36%)     4 ( 0.00%)   1 ( 0.00%)  1,842,564 ( 0.39%)     0              0           1,228,376 ( 0.58%)   0            0                   int numOfFds = epoll_wait(m_epfd, m_evlist, 1024, 2000);
 1,228,376 ( 0.08%)     0            0             614,188 ( 0.13%)     0              0                   0            0            0                   if(numOfFds < 0) {
         .              .            .                   .              .              .                   .            .            .                       closeWithError("Epoll_wait error.");
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .           
22,258,688 ( 1.45%)    10 ( 0.00%)   9 ( 0.00%) 15,619,187 ( 3.33%)     0              0             614,188 ( 0.29%)   0            0                   for(int i = 0 ; i < numOfFds ; i++) {
67,157,132 ( 4.37%)     2 ( 0.00%)   1 ( 0.00%) 23,984,690 ( 5.11%) 1,288 ( 0.15%)   150 ( 0.07%)          0            0            0                       if(m_evlist[i].data.fd == m_socket) {
     3,132 ( 0.00%)     0            0                 783 ( 0.00%)     0              0               1,566 ( 0.00%)   0            0                           int new_client = acceptConnection();
     3,915 ( 0.00%)     0            0               2,349 ( 0.00%)   411 ( 0.05%)   374 ( 0.16%)        783 ( 0.00%)   0            0                           m_numOfClients++;
     5,481 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)        783 ( 0.00%)     0              0                 783 ( 0.00%)   0            0                           m_clientSocketFds.push_back(new_client);
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .                       else {
52,757,705 ( 3.44%)     1 ( 0.00%)   0          14,388,465 ( 3.06%)   422 ( 0.05%)   128 ( 0.06%)  4,796,155 ( 2.26%)   0            0                           HttpStatus *httpStatus = reinterpret_cast<HttpStatus*>(m_evlist[i].data.ptr);
         .              .            .                   .              .              .                   .            .            .           
14,388,465 ( 0.94%)   455 ( 0.01%)  11 ( 0.00%)  9,592,310 ( 2.04%) 3,585 ( 0.41%) 1,305 ( 0.57%)  4,796,155 ( 2.26%)   0            0                           int client = httpStatus->m_client_fd;
         .              .            .                   .              .              .                   .            .            .           
19,184,620 ( 1.25%)     0            0           9,592,310 ( 2.04%) 1,252 ( 0.14%)   497 ( 0.22%)          0            0            0                           if(httpStatus->m_req_status == REQUEST_STATUS::Reading) {
     5,481 ( 0.00%)     0            0               2,349 ( 0.00%)     0              0               1,566 ( 0.00%)   0            0                               int readingFinished = readFromClient(client, httpStatus);
         .              .            .                   .              .              .                   .            .            .           
     1,566 ( 0.00%)     0            0                 783 ( 0.00%)     0              0                   0            0            0                               if(readingFinished == true) {
     5,481 ( 0.00%)    10 ( 0.00%)   9 ( 0.00%)      2,349 ( 0.00%)     0              0                 783 ( 0.00%)   0            0                                   processConnection(client, httpStatus);
         .              .            .                   .              .              .                   .            .            .                               }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                               else if(readingFinished == false){
         .              .            .                   .              .              .                   .            .            .                                   m_evlist[i].events = EPOLLIN;
         .              .            .                   .              .              .                   .            .            .                                   m_evlist[i].data.ptr = static_cast<void*>(httpStatus);
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                                   if(epoll_ctl(m_epfd, EPOLL_CTL_MOD, httpStatus->m_client_fd, &m_evlist[i]) < 0) {
         .              .            .                   .              .              .                   .            .            .                                       closeWithError("Epoll_ctl_del error.");
-- line 185 ----------------------------------------
-- line 186 ----------------------------------------
         .              .            .                   .              .              .                   .            .            .                                   }
         .              .            .                   .              .              .                   .            .            .                               }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                               else if(readingFinished == -1) {
         .              .            .                   .              .              .                   .            .            .                                   httpStatus->m_req_status = REQUEST_STATUS::Ended;
         .              .            .                   .              .              .                   .            .            .                               }
         .              .            .                   .              .              .                   .            .            .                           }
         .              .            .                   .              .              .                   .            .            .           
19,181,488 ( 1.25%)   783 ( 0.02%)   8 ( 0.00%)  9,590,744 ( 2.04%)     0              0                   0            0            0                           else if(httpStatus->m_req_status == REQUEST_STATUS::Writing) {
28,772,231 ( 1.87%)     0            0           9,590,744 ( 2.04%)     0              0           9,590,743 ( 4.52%)   0            0                               bool writingFinished = writeToClient(httpStatus);
         .              .            .                   .              .              .                   .            .            .           
 9,590,742 ( 0.62%)   783 ( 0.02%)  15 ( 0.00%)  4,795,371 ( 1.02%)     0              0                   0            0            0                               if(writingFinished) {
         .              .            .                   .              .              .                   .            .            .           
     1,550 ( 0.00%)     0            0                 775 ( 0.00%)     0              0                 775 ( 0.00%)   0            0                                   httpStatus->m_req_status = REQUEST_STATUS::Ended;
     1,550 ( 0.00%)     0            0                 775 ( 0.00%)     0              0                 775 ( 0.00%)   0            0                                   httpStatus->m_sent_bytes = 0;
     1,550 ( 0.00%)     0            0                 775 ( 0.00%)     0              0                 775 ( 0.00%)   0            0                                   httpStatus->m_read_body_bytes = 0;
     1,550 ( 0.00%)     0            0                 775 ( 0.00%)     0              0                 775 ( 0.00%)   0            0                                   httpStatus->m_read_header_bytes = 0;
     4,650 ( 0.00%)   775 ( 0.02%)   4 ( 0.00%)        775 ( 0.00%)     0              0               1,550 ( 0.00%)  13 ( 0.00%)   0                                   httpStatus->m_buffer[0] = '\0';
         .              .            .                   .              .              .                   .            .            .           
    15,500 ( 0.00%)   775 ( 0.02%)  28 ( 0.01%)      4,650 ( 0.00%)     0              0                 775 ( 0.00%)   0            0                                   if(epoll_ctl(m_epfd, EPOLL_CTL_DEL, httpStatus->m_client_fd, &m_evlist[i]) < 0) {
         .              .            .                   .              .              .                   .            .            .                                       closeWithError("Epoll_ctl error.");
         .              .            .                   .              .              .                   .            .            .                                   }
         .              .            .                   .              .              .                   .            .            .           
     5,425 ( 0.00%)   775 ( 0.02%)   9 ( 0.00%)      1,550 ( 0.00%)     0              0                 775 ( 0.00%)   0            0                                   if(close(httpStatus->m_client_fd) < 0) {
         .              .            .                   .              .              .                   .            .            .                                       closeWithError("Epoll fd close error");
         .              .            .                   .              .              .                   .            .            .                                   }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                               }
         .              .            .                   .              .              .                   .            .            .                               else {
47,945,960 ( 3.12%)   522 ( 0.01%)  26 ( 0.01%)  9,589,192 ( 2.04%)     0              0           4,794,596 ( 2.26%)   0            0                                   m_evlist[i].events = EPOLLOUT;
         .              .            .                   .              .              .                   .            .            .                                   //m_evlist[i].data.ptr = static_cast<void*>(httpStatus);
         .              .            .                   .              .              .                   .            .            .           
95,891,920 ( 6.25%)   522 ( 0.01%)  89 ( 0.03%) 28,767,576 ( 6.13%)     0              0           4,794,596 ( 2.26%)   0            0                                   if(epoll_ctl(m_epfd, EPOLL_CTL_MOD, httpStatus->m_client_fd, &m_evlist[i]) < 0) {
         .              .            .                   .              .              .                   .            .            .                                       closeWithError("Epoll_ctl error.");
         .              .            .                   .              .              .                   .            .            .                                   }
         .              .            .                   .              .              .                   .            .            .                               }
         .              .            .                   .              .              .                   .            .            .                           }
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           }
         .              .            .                   .              .              .                   .            .            .           
     8,613 ( 0.00%)    29 ( 0.00%)   1 ( 0.00%)        783 ( 0.00%)     0              0               4,698 ( 0.00%)   2 ( 0.00%)   0           int MoxitServer::readFromClient(int client, HttpStatus *httpStatus) {
     2,349 ( 0.00%)   783 ( 0.02%)   2 ( 0.00%)          0              0              0                 783 ( 0.00%)   0            0               std::string bufferStr;
     6,264 ( 0.00%)     0            0               2,349 ( 0.00%)     0              0                 783 ( 0.00%)   0            0               bufferStr.append(httpStatus->m_buffer, httpStatus->m_read_body_bytes);
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .               while(true) {
   631,883 ( 0.04%)   783 ( 0.02%)  12 ( 0.00%)          0              0              0             608,128 ( 0.29%)  62 ( 0.01%)   1 ( 0.00%)          char buffer[1024] = {};
    33,257 ( 0.00%)   783 ( 0.02%)  47 ( 0.01%)      4,751 ( 0.00%)     0              0               9,502 ( 0.00%)   0            0                   ssize_t readBytes = recv(client, buffer, 50, 0);
         .              .            .                   .              .              .                   .            .            .           
     9,502 ( 0.00%)     0            0               4,751 ( 0.00%)     0              0                   0            0            0                   if(readBytes > 0) {
    23,808 ( 0.00%)     0            0               3,968 ( 0.00%)     0              0               3,968 ( 0.00%)   0            0                       bufferStr.append(buffer, readBytes);
    27,776 ( 0.00%)   783 ( 0.02%)   5 ( 0.00%)     15,872 ( 0.00%)    12 ( 0.00%)     0               3,968 ( 0.00%)   0            0                       httpStatus->m_read_body_bytes += readBytes;
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .           
     1,566 ( 0.00%)     0            0                 783 ( 0.00%)     0              0                   0            0            0                   else if(readBytes == 0) { //Client closed connection
         .              .            .                   .              .              .                   .            .            .                       return -1;
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   else { //readBytes < 0
     3,132 ( 0.00%)     0            0                 783 ( 0.00%)     0              0                 783 ( 0.00%)   0            0                       if(errno == EAGAIN || errno == EWOULDBLOCK) { //Source temporary unavailable
     5,481 ( 0.00%)   783 ( 0.02%)   1 ( 0.00%)          0              0              0               1,566 ( 0.00%)   0            0                           auto emptyLinePos = bufferStr.find("\r\n\r\n");
     1,566 ( 0.00%)     0            0                 783 ( 0.00%)     0              0                   0            0            0                           if(emptyLinePos != std::string::npos) {
     2,349 ( 0.00%)   783 ( 0.02%)   2 ( 0.00%)      1,566 ( 0.00%)     0              0                 783 ( 0.00%)   3 ( 0.00%)   0                               httpStatus->m_read_header_bytes = emptyLinePos;
     7,047 ( 0.00%)     0            0               3,915 ( 0.00%)     0              0                 783 ( 0.00%)   0            0                               httpStatus->m_read_body_bytes -= (httpStatus->m_read_header_bytes + 4);
         .              .            .                   .              .              .                   .            .            .           
     4,698 ( 0.00%)   783 ( 0.02%)   3 ( 0.00%)        783 ( 0.00%)     0              0                 783 ( 0.00%)   0            0                               httpStatus->m_buffer = bufferStr;
         .              .            .                   .              .              .                   .            .            .           
     1,566 ( 0.00%)     0            0                   0              0              0                   0            0            0                               return true;
         .              .            .                   .              .              .                   .            .            .                           }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                           break;
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                       else {
         .              .            .                   .              .              .                   .            .            .                           closeWithError("recv error");
         .              .            .                   .              .              .                   .            .            .                           break;
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .               httpStatus->m_buffer = bufferStr;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .               return true;
     7,830 ( 0.00%)   784 ( 0.02%)   2 ( 0.00%)      3,915 ( 0.00%)     0              0                 783 ( 0.00%)   0            0           }
         .              .            .                   .              .              .                   .            .            .           
28,772,232 ( 1.87%)   783 ( 0.02%)   0                   0              0              0          14,386,116 ( 6.78%)   0            0           bool MoxitServer::writeToClient(HttpStatus *httpStatus) {
 4,795,372 ( 0.31%)     0            0                   0              0              0           4,795,372 ( 2.26%)   0            0               size_t MAX_BYTES_TO_SEND = 50;
 4,795,372 ( 0.31%)     0            0                   0              0              0           4,795,372 ( 2.26%)   0            0               bool ind = false;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .               while(true) {
 9,837,892 ( 0.64%)     0            0           4,918,946 ( 1.05%)     0              0                   0            0            0                   if(ind) {
     1,550 ( 0.00%)     0            0                 775 ( 0.00%)     0              0                 775 ( 0.00%)   0            0                       httpStatus->m_req_status = REQUEST_STATUS::Ended;
     1,550 ( 0.00%)     0            0                   0              0              0                   0            0            0                       return true;
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .           
19,672,684 ( 1.28%)   783 ( 0.02%)  11 ( 0.00%) 14,754,513 ( 3.14%)     0              0                   0            0            0                   if(httpStatus->m_left_to_send < MAX_BYTES_TO_SEND) {
14,386,116 ( 0.94%)     0            0           9,590,744 ( 2.04%)     0              0           4,795,372 ( 2.26%)   0            0                       MAX_BYTES_TO_SEND = httpStatus->m_left_to_send;
 4,795,372 ( 0.31%)     0            0                   0              0              0           4,795,372 ( 2.26%)   0            0                       ind = true;
         .              .            .                   .              .              .                   .            .            .                   }
34,427,196 ( 2.24%)     0            0          14,754,513 ( 3.14%)     0              0           9,836,341 ( 4.63%)   0            0                   ssize_t sendBytes = send(httpStatus->m_client_fd,
39,345,368 ( 2.56%)   783 ( 0.02%)   8 ( 0.00%) 14,754,513 ( 3.14%)     0              0           4,918,171 ( 2.32%)   0            0                                            &httpStatus->m_buffer.c_str()[httpStatus->m_sent_bytes],
         .              .            .                   .              .              .                   .            .            .                                            MAX_BYTES_TO_SEND, 0);
         .              .            .                   .              .              .                   .            .            .           
 9,836,340 ( 0.64%)     0            0           4,918,170 ( 1.05%)     0              0                   0            0            0                   if(sendBytes > 0) {
   741,444 ( 0.05%)   262 ( 0.01%)   3 ( 0.00%)    494,296 ( 0.11%)     0              0             123,574 ( 0.06%)   0            0                       httpStatus->m_sent_bytes += sendBytes;
   988,592 ( 0.06%)     0            0             494,296 ( 0.11%)     0              0             123,574 ( 0.06%)   0            0                       httpStatus->m_left_to_send -= sendBytes;
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .           
 9,589,192 ( 0.62%)   521 ( 0.01%)  12 ( 0.00%)  4,794,596 ( 1.02%)     0              0                   0            0            0                   else if(sendBytes == 0) { //Client closed connection
 4,794,596 ( 0.31%)   522 ( 0.01%) 517 ( 0.15%)          0              0              0                   0            0            0                       break;
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   else { //sendBytes < 0
         .              .            .                   .              .              .                   .            .            .                       if(errno == EAGAIN || errno == EWOULDBLOCK) { //Source temporary unavailable
         .              .            .                   .              .              .                   .            .            .                           break;
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                       else {
         .              .            .                   .              .              .                   .            .            .                           //closeWithError("send error");
         .              .            .                   .              .              .                   .            .            .                           return true;
         .              .            .                   .              .              .                   .            .            .                           break;
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
 4,794,596 ( 0.31%)     0            0                   0              0              0                   0            0            0               return false;
 9,590,742 ( 0.62%)   261 ( 0.01%)  71 ( 0.02%)  9,590,742 ( 2.04%)     0              0                   0            0            0           }
         .              .            .                   .              .              .                   .            .            .           
     9,396 ( 0.00%)   784 ( 0.02%)  80 ( 0.02%)        783 ( 0.00%)     0              0               5,481 ( 0.00%)  11 ( 0.00%)   0           void MoxitServer::processConnection(int socket, HttpStatus *httpStatus) const {
     2,349 ( 0.00%)     0            0                   0              0              0                 783 ( 0.00%)   0            0               std::string headerStr;
     2,349 ( 0.00%)     0            0                   0              0              0                 783 ( 0.00%)   0            0               std::string bodyStr;
         .              .            .                   .              .              .                   .            .            .           
     7,047 ( 0.00%)   783 ( 0.02%)   5 ( 0.00%)      2,349 ( 0.00%)     3 ( 0.00%)     0                 783 ( 0.00%)   0            0               headerStr.append(httpStatus->m_buffer, 0, httpStatus->m_read_header_bytes);
     9,396 ( 0.00%)   783 ( 0.02%) 463 ( 0.14%)      3,915 ( 0.00%)     0              0                 783 ( 0.00%)   0            0               bodyStr.append(httpStatus->m_buffer, httpStatus->m_read_header_bytes + 4,
         .              .            .                   .              .              .                   .            .            .                              httpStatus->m_read_body_bytes);
         .              .            .                   .              .              .                   .            .            .           
     3,915 ( 0.00%)     0            0                   0              0              0                 783 ( 0.00%)   0            0               auto reqHeader = RequestHeader::parse(headerStr);
         .              .            .                   .              .              .                   .            .            .           
     3,915 ( 0.00%)   783 ( 0.02%)   0                 783 ( 0.00%)     0              0                 783 ( 0.00%)   0            0               Response res = Response(socket);
         .              .            .                   .              .              .                   .            .            .           
       783 ( 0.00%)   783 ( 0.02%) 326 ( 0.10%)          0              0              0                 783 ( 0.00%)   0            0               bool ind = false;
    82,199 ( 0.01%) 1,620 ( 0.03%) 381 ( 0.11%)      2,349 ( 0.00%)     0              0              24,604 ( 0.01%)  19 ( 0.00%)   0               for(const auto &handler: m_handlers) {
    80,520 ( 0.01%)   783 ( 0.02%)  38 ( 0.01%)      5,368 ( 0.00%)     0              0              16,104 ( 0.01%)   0            0                   if(handler.is(reqHeader.getMethod(), reqHeader.getPath())) {
    18,009 ( 0.00%) 3,132 ( 0.06%) 594 ( 0.17%)      1,566 ( 0.00%)    17 ( 0.00%)     0               3,915 ( 0.00%)   0            0                       handler.call(Request(reqHeader, bodyStr, socket), res);
       783 ( 0.00%)     0            0                   0              0              0                 783 ( 0.00%)   0            0                       ind = true;
       783 ( 0.00%)     0            0                   0              0              0                   0            0            0                       break;
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .               }
         .              .            .                   .              .              .                   .            .            .           
     3,132 ( 0.00%)   783 ( 0.02%) 371 ( 0.11%)        783 ( 0.00%)     0              0                   0            0            0               if(!ind) {
         .              .            .                   .              .              .                   .            .            .                   std::string response = res.sendStatus(404);
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   struct epoll_event event;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   HttpStatus *httpStatus = new HttpStatus(REQUEST_STATUS::Writing, socket);
         .              .            .                   .              .              .                   .            .            .                   event.events = EPOLLOUT;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   httpStatus->m_left_to_send = response.size();
-- line 345 ----------------------------------------
-- line 346 ----------------------------------------
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   httpStatus->m_buffer = response;
         .              .            .                   .              .              .                   .            .            .                   event.data.ptr = static_cast<void*>(httpStatus);
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   if(epoll_ctl(m_epfd, EPOLL_CTL_MOD, socket, &event) < 0) {
         .              .            .                   .              .              .                   .            .            .                           closeWithError("Epoll_ctl error.");
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .               }
    15,660 ( 0.00%) 2,349 ( 0.05%) 285 ( 0.08%)      4,698 ( 0.00%)   345 ( 0.04%)   338 ( 0.15%)      3,132 ( 0.00%)   0            0           }
         .              .            .                   .              .              .                   .            .            .           
        77 ( 0.00%)    12 ( 0.00%)   2 ( 0.00%)          0              0              0                  44 ( 0.00%)   0            0           MoxitServer& MoxitServer::post(const std::string &path, const HandlerType &handler) {
        66 ( 0.00%)     0            0                  33 ( 0.00%)     0              0                  11 ( 0.00%)   0            0               return this->use(Method::POST, path, handler);
        22 ( 0.00%)    11 ( 0.00%)   0                  22 ( 0.00%)     0              0                   0            0            0           }
         .              .            .                   .              .              .                   .            .            .           
       132 ( 0.00%)    11 ( 0.00%)   1 ( 0.00%)         11 ( 0.00%)     0              0                  77 ( 0.00%)   0            0           MoxitServer& MoxitServer::use(Method method, const std::string &path, const HandlerType &handler) {
       154 ( 0.00%)    12 ( 0.00%)   1 ( 0.00%)         33 ( 0.00%)     0              0                  33 ( 0.00%)   0            0               Handler h = Handler(method, path, handler);
        66 ( 0.00%)     0            0                  11 ( 0.00%)     0              0                  11 ( 0.00%)   0            0               m_handlers.emplace_back(h);
        22 ( 0.00%)    11 ( 0.00%)   1 ( 0.00%)         11 ( 0.00%)     0              0                   0            0            0               return *this;
        99 ( 0.00%)    11 ( 0.00%)   1 ( 0.00%)         55 ( 0.00%)     0              0                  11 ( 0.00%)   0            0           }
         .              .            .                   .              .              .                   .            .            .           
     9,396 ( 0.00%) 1,566 ( 0.03%) 182 ( 0.05%)        783 ( 0.00%)     0              0               5,481 ( 0.00%)   0            0           void MoxitServer::addEpollWriteEvent(const Request& request ,const std::string& response) {
     2,349 ( 0.00%)     0            0                   0              0              0               1,566 ( 0.00%)   0            0               struct epoll_event *event = new struct epoll_event;
     3,132 ( 0.00%)     0            0                 783 ( 0.00%)     0              0               1,566 ( 0.00%)   0            0               int socket_fd = request.getSocketFd();
         .              .            .                   .              .              .                   .            .            .           
     7,047 ( 0.00%)   783 ( 0.02%)  36 ( 0.01%)        783 ( 0.00%)     0              0               2,349 ( 0.00%)   0            0               HttpStatus *httpStatus = new HttpStatus(REQUEST_STATUS::Writing, socket_fd);
     1,566 ( 0.00%)     0            0                 783 ( 0.00%)     0              0                 783 ( 0.00%)   0            0               event->events = EPOLLOUT;
         .              .            .                   .              .              .                   .            .            .           
     3,915 ( 0.00%)     0            0               1,566 ( 0.00%)     0              0               1,566 ( 0.00%)   0            0               httpStatus->m_left_to_send = response.size();
     4,698 ( 0.00%)   783 ( 0.02%)   8 ( 0.00%)      1,566 ( 0.00%)     0              0                 783 ( 0.00%)   0            0               httpStatus->m_buffer = response;
         .              .            .                   .              .              .                   .            .            .           
     2,349 ( 0.00%)     0            0               1,566 ( 0.00%)    25 ( 0.00%)     0                 783 ( 0.00%)  35 ( 0.01%)   0               event->data.ptr = static_cast<void*>(httpStatus);
         .              .            .                   .              .              .                   .            .            .           
     7,830 ( 0.00%)     0            0               3,132 ( 0.00%)   783 ( 0.09%)   558 ( 0.24%)        783 ( 0.00%)   0            0               if(epoll_ctl(m_epfd, EPOLL_CTL_MOD, socket_fd, event) < 0) {
         .              .            .                   .              .              .                   .            .            .                   closeWithError("Epoll_ctl error.");
         .              .            .                   .              .              .                   .            .            .               }
     7,047 ( 0.00%)   783 ( 0.02%)  18 ( 0.01%)      4,698 ( 0.00%)    51 ( 0.01%)     5 ( 0.00%)          0            0            0           }
         .              .            .                   .              .              .                   .            .            .           
         9 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          1 ( 0.00%)     0              0                   4 ( 0.00%)   0            0           void MoxitServer::addHandlers() {
        31 ( 0.00%)     3 ( 0.00%)   2 ( 0.00%)          2 ( 0.00%)     0              0                   8 ( 0.00%)   0            0               this->post("/", [this] (const Request &req, Response res) {
         .              .            .                   .              .              .                   .            .            .                   std::cout << "Welcome." << std::endl;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   std::string response = res.send(req.getBody());
         .              .            .                   .              .              .                   .            .            .                   this->addEpollWriteEvent(req, response);
         .              .            .                   .              .              .                   .            .            .               });
         .              .            .                   .              .              .                   .            .            .           
       191 ( 0.00%)    18 ( 0.00%)  18 ( 0.01%)         74 ( 0.00%)     4 ( 0.00%)     0                  72 ( 0.00%)   0            0               this->post("/narratorChoice", [this](const Request &req, Response res) {
        24 ( 0.00%)     8 ( 0.00%)   8 ( 0.00%)          0              0              0                   8 ( 0.00%)   0            0                   std::string response;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   try {
        56 ( 0.00%)     0            0                   0              0              0                  16 ( 0.00%)   0            0                       QJsonDocument reqDoc = QJsonDocument::fromJson(QString(
        24 ( 0.00%)     0            0                   8 ( 0.00%)     0              0                   8 ( 0.00%)   0            0                           req.getBody().c_str()
       136 ( 0.00%)    24 ( 0.00%)  16 ( 0.00%)          0              0              0                  32 ( 0.00%)   0            0                       ).toUtf8());
         .              .            .                   .              .              .                   .            .            .           
       208 ( 0.00%)    24 ( 0.00%)  16 ( 0.00%)          0              0              0                  48 ( 0.00%)   0            0                       std::string gameId = std::to_string(reqDoc["gameId"].toInt());
         .              .            .                   .              .              .                   .            .            .           
       136 ( 0.00%)     8 ( 0.00%)   8 ( 0.00%)          0              0              0                  40 ( 0.00%)   0            0                       if(this->m_games.find(gameId) == this->m_games.end()) {
         .              .            .                   .              .              .                   .            .            .                           throw std::runtime_error("gameId not found");
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .                       
        48 ( 0.00%)     8 ( 0.00%)   8 ( 0.00%)          0              0              0                  16 ( 0.00%)   0            0                       Game &game = this->m_games[gameId];
         .              .            .                   .              .              .                   .            .            .           
       176 ( 0.00%)    16 ( 0.00%)  16 ( 0.00%)          0              0              0                  48 ( 0.00%)   0            0                       int cardId = reqDoc["cardId"].toInt();
       240 ( 0.00%)    16 ( 0.00%)  16 ( 0.00%)          0              0              0                  56 ( 0.00%)   0            0                       std::string clue = reqDoc["clue"].toString().toStdString();
         .              .            .                   .              .              .                   .            .            .           
        48 ( 0.00%)     0            0                  16 ( 0.00%)     0              0                   8 ( 0.00%)   0            0                       game.narratorChoice(cardId, clue);
         .              .            .                   .              .              .                   .            .            .           
       176 ( 0.00%)    32 ( 0.00%)  16 ( 0.00%)         16 ( 0.00%)     0              0                  40 ( 0.00%)   0            0                       response = res.send(game.toJsonString());
        72 ( 0.00%)     8 ( 0.00%)   8 ( 0.00%)          0              0              0                  24 ( 0.00%)   0            0                   }
         .              .            .                   .              .              .                   .            .            .                   catch(std::exception &e) {
         .              .            .                   .              .              .                   .            .            .                       response = res.sendStatus(500, e.what());
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .                   
        40 ( 0.00%)     0            0                   8 ( 0.00%)     0              0                   8 ( 0.00%)   0            0                   this->addEpollWriteEvent(req, response);
       104 ( 0.00%)    16 ( 0.00%)  16 ( 0.00%)         56 ( 0.00%)     6 ( 0.00%)     3 ( 0.00%)          8 ( 0.00%)   0            0               });
         .              .            .                   .              .              .                   .            .            .           
       351 ( 0.00%)    34 ( 0.00%)  22 ( 0.01%)        146 ( 0.00%)    16 ( 0.00%)     2 ( 0.00%)        136 ( 0.00%)   0            0               this->post("/playerChoice", [this](const Request &req, Response res) {
        48 ( 0.00%)    16 ( 0.00%)  14 ( 0.00%)          0              0              0                  16 ( 0.00%)   0            0                   std::string response;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   try {
       112 ( 0.00%)     0            0                   0              0              0                  32 ( 0.00%)   0            0                       QJsonDocument reqDoc = QJsonDocument::fromJson(QString(
        48 ( 0.00%)     0            0                  16 ( 0.00%)     0              0                  16 ( 0.00%)   0            0                           req.getBody().c_str()
       272 ( 0.00%)    32 ( 0.00%)  32 ( 0.01%)          0              0              0                  64 ( 0.00%)   0            0                       ).toUtf8());
         .              .            .                   .              .              .                   .            .            .           
       416 ( 0.00%)    32 ( 0.00%)  29 ( 0.01%)          0              0              0                  96 ( 0.00%)   0            0                       std::string gameId = std::to_string(reqDoc["gameId"].toInt());
         .              .            .                   .              .              .                   .            .            .           
       272 ( 0.00%)    16 ( 0.00%)  16 ( 0.00%)          0              0              0                  80 ( 0.00%)   0            0                       if(this->m_games.find(gameId) == this->m_games.end()) {
         .              .            .                   .              .              .                   .            .            .                           throw std::runtime_error("gameId not found");
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .                       
        96 ( 0.00%)    16 ( 0.00%)  16 ( 0.00%)          0              0              0                  32 ( 0.00%)   0            0                       Game &game = this->m_games[gameId];
         .              .            .                   .              .              .                   .            .            .           
       352 ( 0.00%)    16 ( 0.00%)  14 ( 0.00%)          0              0              0                  96 ( 0.00%)   0            0                       int cardId = reqDoc["cardId"].toInt();
       352 ( 0.00%)    32 ( 0.00%)  32 ( 0.01%)          0              0              0                  96 ( 0.00%)   0            0                       int playerId = reqDoc["playerId"].toInt();
         .              .            .                   .              .              .                   .            .            .           
        96 ( 0.00%)    16 ( 0.00%)  16 ( 0.00%)         48 ( 0.00%)     0              0                  16 ( 0.00%)   0            0                       game.playerChoice(playerId, cardId);
         .              .            .                   .              .              .                   .            .            .           
       352 ( 0.00%)    32 ( 0.00%)  16 ( 0.00%)         32 ( 0.00%)    16 ( 0.00%)    15 ( 0.01%)         80 ( 0.00%)   0            0                       response = res.send(game.toJsonString());
        96 ( 0.00%)    16 ( 0.00%)  13 ( 0.00%)          0              0              0                  32 ( 0.00%)   0            0                   }
         .              .            .                   .              .              .                   .            .            .                   catch(std::exception &e) {
         .              .            .                   .              .              .                   .            .            .                       response = res.sendStatus(500, e.what());
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .                   
        80 ( 0.00%)     0            0                  16 ( 0.00%)     0              0                  16 ( 0.00%)   0            0                   this->addEpollWriteEvent(req, response);
       208 ( 0.00%)    24 ( 0.00%)  23 ( 0.01%)        112 ( 0.00%)    14 ( 0.00%)     7 ( 0.00%)         16 ( 0.00%)   0            0               });
         .              .            .                   .              .              .                   .            .            .           
       351 ( 0.00%)    26 ( 0.00%)  25 ( 0.01%)        146 ( 0.00%)    13 ( 0.00%)     0                 136 ( 0.00%)   0            0               this->post("/playerVote", [this](const Request &req, Response res) {
        48 ( 0.00%)     0            0                   0              0              0                  16 ( 0.00%)   0            0                   std::string response;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   try {
       112 ( 0.00%)    16 ( 0.00%)  16 ( 0.00%)          0              0              0                  32 ( 0.00%)   0            0                       QJsonDocument reqDoc = QJsonDocument::fromJson(QString(
        48 ( 0.00%)     0            0                  16 ( 0.00%)     0              0                  16 ( 0.00%)   0            0                           req.getBody().c_str()
       272 ( 0.00%)    16 ( 0.00%)  16 ( 0.00%)          0              0              0                  64 ( 0.00%)   0            0                       ).toUtf8());
         .              .            .                   .              .              .                   .            .            .           
       416 ( 0.00%)    20 ( 0.00%)  19 ( 0.01%)          0              0              0                  96 ( 0.00%)   0            0                       std::string gameId = std::to_string(reqDoc["gameId"].toInt());
         .              .            .                   .              .              .                   .            .            .           
       272 ( 0.00%)    16 ( 0.00%)  16 ( 0.00%)          0              0              0                  80 ( 0.00%)   0            0                       if(this->m_games.find(gameId) == this->m_games.end()) {
         .              .            .                   .              .              .                   .            .            .                           throw std::runtime_error("gameId not found");
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .                       
        96 ( 0.00%)    16 ( 0.00%)  16 ( 0.00%)          0              0              0                  32 ( 0.00%)   0            0                       Game &game = this->m_games[gameId];
         .              .            .                   .              .              .                   .            .            .           
       352 ( 0.00%)    32 ( 0.00%)  16 ( 0.00%)          0              0              0                  96 ( 0.00%)   0            0                       int cardId = reqDoc["cardId"].toInt();
       352 ( 0.00%)    32 ( 0.00%)  32 ( 0.01%)          0              0              0                  96 ( 0.00%)   0            0                       int playerId = reqDoc["playerId"].toInt();
         .              .            .                   .              .              .                   .            .            .           
        96 ( 0.00%)    16 ( 0.00%)  16 ( 0.00%)         48 ( 0.00%)     0              0                  16 ( 0.00%)   0            0                       game.playerVote(playerId, cardId);
         .              .            .                   .              .              .                   .            .            .           
       352 ( 0.00%)    40 ( 0.00%)  19 ( 0.01%)         32 ( 0.00%)    14 ( 0.00%)    13 ( 0.01%)         80 ( 0.00%)   0            0                       response = res.send(game.toJsonString());
        96 ( 0.00%)    16 ( 0.00%)  16 ( 0.00%)          0              0              0                  32 ( 0.00%)   0            0                   }
         .              .            .                   .              .              .                   .            .            .                   catch(std::exception &e) {
         .              .            .                   .              .              .                   .            .            .                       response = res.sendStatus(500, e.what());
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .                   
        80 ( 0.00%)     0            0                  16 ( 0.00%)     0              0                  16 ( 0.00%)   0            0                   this->addEpollWriteEvent(req, response);
       208 ( 0.00%)    32 ( 0.00%)  32 ( 0.01%)        112 ( 0.00%)    14 ( 0.00%)     3 ( 0.00%)         16 ( 0.00%)   0            0               });
         .              .            .                   .              .              .                   .            .            .           
        71 ( 0.00%)    11 ( 0.00%)  10 ( 0.00%)         20 ( 0.00%)     0              0                  24 ( 0.00%)   0            0               this->post("/joinGame", [this] (const Request &req, Response res) {
         6 ( 0.00%)     0            0                   0              0              0                   2 ( 0.00%)   0            0                   std::string response;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   try {
        14 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          0              0              0                   4 ( 0.00%)   0            0                       QJsonDocument reqDoc = QJsonDocument::fromJson(QString(
         6 ( 0.00%)     0            0                   2 ( 0.00%)     0              0                   2 ( 0.00%)   0            0                           req.getBody().c_str()
        34 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          0              0              0                   8 ( 0.00%)   0            0                       ).toUtf8());
         .              .            .                   .              .              .                   .            .            .           
        52 ( 0.00%)     4 ( 0.00%)   4 ( 0.00%)          0              0              0                  12 ( 0.00%)   0            0                       std::string gameId = std::to_string(reqDoc["gameId"].toInt());
         .              .            .                   .              .              .                   .            .            .           
        34 ( 0.00%)     0            0                   0              0              0                  10 ( 0.00%)   0            0                       if(this->m_games.find(gameId) == this->m_games.end()) {
         .              .            .                   .              .              .                   .            .            .                           throw std::runtime_error("gameId not found");
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .           
        12 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          0              0              0                   4 ( 0.00%)   0            0                       Game &game = this->m_games[gameId];
         .              .            .                   .              .              .                   .            .            .           
        22 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          4 ( 0.00%)     0              0                   4 ( 0.00%)   0            0                       if(game.maxPlayers() == game.numOfPlayers()) {
         .              .            .                   .              .              .                   .            .            .                           throw std::runtime_error("Game is full!");
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .           
         2 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          0              0              0                   2 ( 0.00%)   0            0                       bool foundPlayer = false;
        88 ( 0.00%)    12 ( 0.00%)   5 ( 0.00%)          6 ( 0.00%)     0              0                  26 ( 0.00%)   0            0                       for(auto &player : game.players()) {
       147 ( 0.00%)    10 ( 0.00%)   8 ( 0.00%)          3 ( 0.00%)     0              0                  33 ( 0.00%)   0            0                           if(player.username() == reqDoc["userName"].toString().toStdString()) {
         .              .            .                   .              .              .                   .            .            .                               throw std::runtime_error("Player already in game.");
         .              .            .                   .              .              .                   .            .            .                           }
         6 ( 0.00%)     0            0                   0              0              0                   2 ( 0.00%)   0            0                       }
         .              .            .                   .              .              .                   .            .            .           
        26 ( 0.00%)     4 ( 0.00%)   2 ( 0.00%)          2 ( 0.00%)     0              0                   6 ( 0.00%)   0            0                       game.addPlayer(reqDoc.object());
         .              .            .                   .              .              .                   .            .            .           
        44 ( 0.00%)     4 ( 0.00%)   2 ( 0.00%)          4 ( 0.00%)     0              0                  10 ( 0.00%)   0            0                       response = res.send(game.toJsonString());
        12 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          0              0              0                   4 ( 0.00%)   0            0                   }
         .              .            .                   .              .              .                   .            .            .                   catch(std::exception &e) {
         .              .            .                   .              .              .                   .            .            .                       response = res.sendStatus(500, e.what());
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .                   
        10 ( 0.00%)     0            0                   2 ( 0.00%)     0              0                   2 ( 0.00%)   0            0                   this->addEpollWriteEvent(req, response);
        26 ( 0.00%)     6 ( 0.00%)   5 ( 0.00%)         14 ( 0.00%)     0              0                   2 ( 0.00%)   0            0               });
         .              .            .                   .              .              .                   .            .            .           
        31 ( 0.00%)     3 ( 0.00%)   2 ( 0.00%)          2 ( 0.00%)     0              0                   8 ( 0.00%)   0            0               this->post("/activeGames", [this] (const Request &req, Response res) {
         .              .            .                   .              .              .                   .            .            .                   std::string resp;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   try {
         .              .            .                   .              .              .                   .            .            .                       QJsonArray games;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                       for(auto &pair : this->m_games) {
         .              .            .                   .              .              .                   .            .            .                           QJsonObject game;
         .              .            .                   .              .              .                   .            .            .                           game["gameId"] = QString(pair.first.c_str());
-- line 527 ----------------------------------------
-- line 537 ----------------------------------------
         .              .            .                   .              .              .                   .            .            .                   catch (std::exception &e) {
         .              .            .                   .              .              .                   .            .            .                       resp = res.sendStatus(500, e.what());
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   this->addEpollWriteEvent(req, resp);
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .               });
         .              .            .                   .              .              .                   .            .            .           
    14,611 ( 0.00%)   886 ( 0.02%) 161 ( 0.05%)      6,563 ( 0.00%)   263 ( 0.03%)    95 ( 0.04%)      5,840 ( 0.00%)   0            0               this->post("/gameState", [this] (const Request &req, Response res)
         .              .            .                   .              .              .                   .            .            .               {
     2,187 ( 0.00%)     0            0                   0              0              0                 729 ( 0.00%)   0            0                   std::string resp;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   try {
    19,683 ( 0.00%)   834 ( 0.02%)  61 ( 0.02%)        729 ( 0.00%)     0              0               5,103 ( 0.00%)   0            0                       QJsonDocument reqDoc = QJsonDocument::fromJson(QString(req.getBody().c_str()).toUtf8());
    18,954 ( 0.00%) 1,458 ( 0.03%) 218 ( 0.06%)          0              0              0               4,374 ( 0.00%)   0            0                       std::string gameId = std::to_string(reqDoc["gameId"].toInt());
         .              .            .                   .              .              .                   .            .            .                       
    12,393 ( 0.00%)   729 ( 0.01%) 220 ( 0.06%)          0              0              0               3,645 ( 0.00%)   0            0                       if(this->m_games.find(gameId) == this->m_games.end()) {
         .              .            .                   .              .              .                   .            .            .                           throw std::runtime_error("gameId not found");
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .           
     4,374 ( 0.00%)    53 ( 0.00%)  32 ( 0.01%)          0              0              0               1,458 ( 0.00%)   0            0                       Game& game = this->m_games[gameId];
    16,038 ( 0.00%)   729 ( 0.01%)  21 ( 0.01%)      1,458 ( 0.00%)     0              0               3,645 ( 0.00%)   0            0                       resp = res.send(game.toJsonString());
     4,374 ( 0.00%)   729 ( 0.01%) 161 ( 0.05%)          0              0              0               1,458 ( 0.00%)   0            0                   }
         .              .            .                   .              .              .                   .            .            .                   catch (std::exception &e) {
         .              .            .                   .              .              .                   .            .            .                       resp = res.sendStatus(500, e.what());
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .           
     3,645 ( 0.00%)     0            0                 729 ( 0.00%)     0              0                 729 ( 0.00%)   0            0                   this->addEpollWriteEvent(req, resp);
     9,477 ( 0.00%) 1,458 ( 0.03%) 215 ( 0.06%)      5,103 ( 0.00%)   309 ( 0.04%)    13 ( 0.01%)        729 ( 0.00%)   0            0               });
         .              .            .                   .              .              .                   .            .            .           
        51 ( 0.00%)     7 ( 0.00%)   5 ( 0.00%)         11 ( 0.00%)     0              0                  16 ( 0.00%)   0            0               this->post("/startGame", [this] (const Request &req, Response res) {
         3 ( 0.00%)     0            0                   0              0              0                   1 ( 0.00%)   0            0                   std::string resp;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   try {
        27 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          1 ( 0.00%)     0              0                   7 ( 0.00%)   0            0                       QJsonDocument reqDoc = QJsonDocument::fromJson(QString(req.getBody().c_str()).toUtf8());
        26 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          0              0              0                   6 ( 0.00%)   0            0                       std::string gameId = std::to_string(reqDoc["gameId"].toInt());
         .              .            .                   .              .              .                   .            .            .                       
        17 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          0              0              0                   5 ( 0.00%)   0            0                       if(this->m_games.find(gameId) == this->m_games.end()) {
         .              .            .                   .              .              .                   .            .            .                           throw std::runtime_error("gameId not found");
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .           
         6 ( 0.00%)     0            0                   0              0              0                   2 ( 0.00%)   0            0                       Game& game = this->m_games[gameId];
         3 ( 0.00%)     0            0                   1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0                       game.startGame();
        22 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          2 ( 0.00%)     0              0                   5 ( 0.00%)   0            0                       resp = res.send(game.toJsonString());
         6 ( 0.00%)     0            0                   0              0              0                   2 ( 0.00%)   0            0                   }
         .              .            .                   .              .              .                   .            .            .                   catch (std::exception &e) {
         .              .            .                   .              .              .                   .            .            .                       resp = res.sendStatus(500, e.what());
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .           
         5 ( 0.00%)     0            0                   1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0                   this->addEpollWriteEvent(req, resp);
         .              .            .                   .              .              .                   .            .            .           
        13 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          7 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)          1 ( 0.00%)   0            0               });
         .              .            .                   .              .              .                   .            .            .           
        50 ( 0.00%)     5 ( 0.00%)   5 ( 0.00%)         11 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)         15 ( 0.00%)   0            0               this->post("/createGame", [this] (const Request &req, Response res) {
         .              .            .                   .              .              .                   .            .            .           
         3 ( 0.00%)     0            0                   0              0              0                   1 ( 0.00%)   0            0                   std::string resp;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   try{
         3 ( 0.00%)     0            0                   0              0              0                   1 ( 0.00%)   0            0                       Game newGame = Game();
        14 ( 0.00%)     0            0                   2 ( 0.00%)     1 ( 0.00%)     0                   3 ( 0.00%)   0            0                       newGame.setGameId(newGame.gameID() + ++this->createdGameCounter);
         8 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          0              0              0                   2 ( 0.00%)   0            0                       std::string gameId = std::to_string(newGame.gameID());
         .              .            .                   .              .              .                   .            .            .           
        27 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          1 ( 0.00%)     0              0                   7 ( 0.00%)   0            0                       QJsonDocument reqDoc = QJsonDocument::fromJson(QString(req.getBody().c_str()).toUtf8());
         .              .            .                   .              .              .                   .            .            .           
        13 ( 0.00%)     2 ( 0.00%)   1 ( 0.00%)          0              0              0                   3 ( 0.00%)   0            0                       newGame.initializeGame(reqDoc.object());
        10 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          0              0              0                   2 ( 0.00%)   0            0                       this->m_games[gameId] = newGame;
         .              .            .                   .              .              .                   .            .            .           
        27 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          1 ( 0.00%)     0              0                   6 ( 0.00%)   0            0                       resp = res.send(this->m_games[gameId].toJsonString());
         9 ( 0.00%)     1 ( 0.00%)   1 ( 0.00%)          0              0              0                   3 ( 0.00%)   0            0                   }
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   catch(std::exception &e) {
         .              .            .                   .              .              .                   .            .            .                       resp = res.sendStatus(500, e.what());
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .                   
         5 ( 0.00%)     0            0                   1 ( 0.00%)     0              0                   1 ( 0.00%)   0            0                   this->addEpollWriteEvent(req, resp);
         .              .            .                   .              .              .                   .            .            .                   
        12 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          6 ( 0.00%)     0              0                   1 ( 0.00%)   0            0               });
         .              .            .                   .              .              .                   .            .            .           
        31 ( 0.00%)     2 ( 0.00%)   2 ( 0.00%)          2 ( 0.00%)     0              0                   8 ( 0.00%)   0            0               this->post("/settings", [this] (const Request &req, Response res) {
         .              .            .                   .              .              .                   .            .            .                   std::string response = res.send(req.getBody());
         .              .            .                   .              .              .                   .            .            .                   this->addEpollWriteEvent(req, response);
         .              .            .                   .              .              .                   .            .            .               });
         .              .            .                   .              .              .                   .            .            .           
       231 ( 0.00%)    52 ( 0.00%)  39 ( 0.01%)         92 ( 0.00%)     6 ( 0.00%)     0                  88 ( 0.00%)   0            0               this->post("/chat", [this] (const Request &req, Response res) {
        30 ( 0.00%)     0            0                   0              0              0                  10 ( 0.00%)   0            0                   std::string resp;
         .              .            .                   .              .              .                   .            .            .           
         .              .            .                   .              .              .                   .            .            .                   try {
        70 ( 0.00%)     0            0                   0              0              0                  20 ( 0.00%)   0            0                       QJsonDocument reqDoc = QJsonDocument::fromJson(QString(
        30 ( 0.00%)    10 ( 0.00%)   6 ( 0.00%)         10 ( 0.00%)     0              0                  10 ( 0.00%)   0            0                           req.getBody().c_str()
       170 ( 0.00%)    10 ( 0.00%)   7 ( 0.00%)          0              0              0                  40 ( 0.00%)   0            0                       ).toUtf8());
         .              .            .                   .              .              .                   .            .            .           
       260 ( 0.00%)    20 ( 0.00%)  14 ( 0.00%)          0              0              0                  60 ( 0.00%)   0            0                       std::string gameId = std::to_string(reqDoc["gameId"].toInt());
         .              .            .                   .              .              .                   .            .            .           
       170 ( 0.00%)    10 ( 0.00%)   7 ( 0.00%)          0              0              0                  50 ( 0.00%)   0            0                       if(this->m_games.find(gameId) == this->m_games.end()) {
         .              .            .                   .              .              .                   .            .            .                           throw std::runtime_error("gameId not found");
         .              .            .                   .              .              .                   .            .            .                       }
         .              .            .                   .              .              .                   .            .            .           
        60 ( 0.00%)     0            0                   0              0              0                  20 ( 0.00%)   0            0                       Game &game = this->m_games[gameId];
       130 ( 0.00%)    10 ( 0.00%)  10 ( 0.00%)         10 ( 0.00%)     0              0                  30 ( 0.00%)   0            0                       game.m_chat.addMessage(reqDoc.object());
         .              .            .                   .              .              .                   .            .            .           
       220 ( 0.00%)    30 ( 0.00%)  17 ( 0.01%)         20 ( 0.00%)     0              0                  50 ( 0.00%)   0            0                       resp = res.send(game.toJsonString());
        60 ( 0.00%)     0            0                   0              0              0                  20 ( 0.00%)   0            0                   }
         .              .            .                   .              .              .                   .            .            .                   catch(std::exception &e) {
         .              .            .                   .              .              .                   .            .            .                       resp = res.sendStatus(500, e.what());
         .              .            .                   .              .              .                   .            .            .                   }
         .              .            .                   .              .              .                   .            .            .           
        50 ( 0.00%)     0            0                  10 ( 0.00%)     0              0                  10 ( 0.00%)   0            0                   this->addEpollWriteEvent(req, resp);
       130 ( 0.00%)    20 ( 0.00%)  12 ( 0.00%)         70 ( 0.00%)     1 ( 0.00%)     0                  10 ( 0.00%)   0            0               });
        28 ( 0.00%)     3 ( 0.00%)   3 ( 0.00%)         11 ( 0.00%)     0              0                   5 ( 0.00%)   0            0           }
--------------------------------------------------------------------------------
-- Auto-annotated source: /home/andrijanabos/Desktop/02-moxit-mock-dixit/backend/src/lib/game/game.cpp
--------------------------------------------------------------------------------
Ir               I1mr           ILmr           Dr               D1mr           DLmr           Dw               D1mw       DLmw       

      .              .              .                .              .              .                .          .          .           #include "game.hpp"
      .              .              .                .              .              .                .          .          .           
     88 ( 0.00%)     6 ( 0.00%)     3 ( 0.00%)      16 ( 0.00%)     0              0               26 ( 0.00%) 0          0           Game::Game() : m_chat(QJsonArray()){
      4 ( 0.00%)     0              0                2 ( 0.00%)     0              0                2 ( 0.00%) 0          0               m_currNarratorId = -1;
      4 ( 0.00%)     0              0                2 ( 0.00%)     0              0                2 ( 0.00%) 0          0               m_maxPlayers = 3;
     10 ( 0.00%)     0              0                2 ( 0.00%)     0              0                4 ( 0.00%) 0          0               m_gameID = time(NULL);
      4 ( 0.00%)     2 ( 0.00%)     1 ( 0.00%)       2 ( 0.00%)     0              0                2 ( 0.00%) 0          0               m_currNarrator = -1;
      4 ( 0.00%)     0              0                2 ( 0.00%)     0              0                2 ( 0.00%) 0          0               m_narratorCard = -1;
      4 ( 0.00%)     0              0                2 ( 0.00%)     0              0                2 ( 0.00%) 0          0               m_gamePhase = GamePhase::NARRATOR_CHOICE;
      4 ( 0.00%)     0              0                2 ( 0.00%)     0              0                2 ( 0.00%) 0          0               m_voteCounter = 0;
      4 ( 0.00%)     0              0                2 ( 0.00%)     0              0                2 ( 0.00%) 0          0               m_choiceCounter = 0;
      4 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)       2 ( 0.00%)     0              0                2 ( 0.00%) 0          0               m_hostId = 0;
      4 ( 0.00%)     0              0                2 ( 0.00%)     0              0                2 ( 0.00%) 0          0               m_isOver = false;
      4 ( 0.00%)     0              0                2 ( 0.00%)     0              0                2 ( 0.00%) 0          0               m_prevNarratorCard = -1;
      4 ( 0.00%)     0              0                2 ( 0.00%)     0              0                2 ( 0.00%) 0          0               m_isGameStarted = false;
     12 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)       2 ( 0.00%)     0              0                2 ( 0.00%) 0          0               m_clue ="";
     14 ( 0.00%)     4 ( 0.00%)     2 ( 0.00%)      10 ( 0.00%)     0              0                0          0          0           }
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           GamePhase Game::gamePhase() const{
      .              .              .                .              .              .                .          .          .               return m_gamePhase;
      .              .              .                .              .              .                .          .          .           }
      .              .              .                .              .              .                .          .          .           
      8 ( 0.00%)     0              0                0              0              0                4 ( 0.00%) 0          0           int Game::gameID() const{
      4 ( 0.00%)     0              0                4 ( 0.00%)     0              0                0          0          0               return m_gameID;
      4 ( 0.00%)     0              0                4 ( 0.00%)     0              0                0          0          0           }
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           int Game::currNarrator() const{
      .              .              .                .              .              .                .          .          .               return m_currNarrator;
      .              .              .                .              .              .                .          .          .           }
      .              .              .                .              .              .                .          .          .           
     15 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)       0              0              0                6 ( 0.00%) 0          0           int Game::numOfPlayers() const{
     12 ( 0.00%)     0              0                3 ( 0.00%)     0              0                3 ( 0.00%) 0          0               return m_players.size();
      6 ( 0.00%)     0              0                6 ( 0.00%)     0              0                0          0          0           }
      .              .              .                .              .              .                .          .          .           
      8 ( 0.00%)     2 ( 0.00%)     2 ( 0.00%)       0              0              0                4 ( 0.00%) 0          0           int Game::maxPlayers() const{
      4 ( 0.00%)     2 ( 0.00%)     2 ( 0.00%)       4 ( 0.00%)     2 ( 0.00%)     0                0          0          0               return m_maxPlayers;
      4 ( 0.00%)     0              0                4 ( 0.00%)     0              0                0          0          0           }
      .              .              .                .              .              .                .          .          .           
     18 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)       0              0              0                9 ( 0.00%) 0          0           std::vector<Player> Game::players() const{
     18 ( 0.00%)     0              0                6 ( 0.00%)     0              0                3 ( 0.00%) 0          0               return m_players;
      9 ( 0.00%)     0              0                9 ( 0.00%)     0              0                0          0          0           }
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           std::string Game::clue() const{
      .              .              .                .              .              .                .          .          .               return m_clue;
      .              .              .                .              .              .                .          .          .           }
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           int Game::narratorCard() const{
      .              .              .                .              .              .                .          .          .               return m_narratorCard;
      .              .              .                .              .              .                .          .          .           }
-- line 49 ----------------------------------------
-- line 51 ----------------------------------------
      .              .              .                .              .              .                .          .          .           std::unordered_map<int, int> Game::commonPile() const{
      .              .              .                .              .              .                .          .          .               return m_commonPile;
      .              .              .                .              .              .                .          .          .           }
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           std::unordered_map<int, int> Game::votes(){
      .              .              .                .              .              .                .          .          .               return m_votes;
      .              .              .                .              .              .                .          .          .           }
      .              .              .                .              .              .                .          .          .           
      6 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)       0              0              0                3 ( 0.00%) 0          0           void Game::shuffleDeck(){
      5 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)       1 ( 0.00%)     0              0                2 ( 0.00%) 0          0               int n = m_deck.size();
      4 ( 0.00%)     0              0                0              0              0                2 ( 0.00%) 0          0               srand(time(NULL)); //todo globalni seed
      .              .              .                .              .              .                .          .          .           
    255 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)     168 ( 0.00%)     0              0                1 ( 0.00%) 0          0               for (int i = n - 1; i > 0; i--)
      .              .              .                .              .              .                .          .          .               {
    498 ( 0.00%)     0              0               83 ( 0.00%)     0              0              166 ( 0.00%) 0          0                   int j = rand() % (i + 1);
      .              .              .                .              .              .                .          .          .           
  1,494 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)     332 ( 0.00%)     0              0              249 ( 0.00%) 0          0                   std::swap(m_deck[i], m_deck[j]);
      .              .              .                .              .              .                .          .          .               }
      5 ( 0.00%)     0              0                3 ( 0.00%)     0              0                0          0          0           }
      .              .              .                .              .              .                .          .          .           
     10 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)       1 ( 0.00%)     0              0                5 ( 0.00%) 0          0           void Game::initializeGame(const QJsonObject& config){
      .              .              .                .              .              .                .          .          .           
     23 ( 0.00%)     2 ( 0.00%)     2 ( 0.00%)       2 ( 0.00%)     0              0                6 ( 0.00%) 0          0               m_maxPlayers =  config["numOfPlayers"].toInt();
      .              .              .                .              .              .                .          .          .               //todo : dodati tajmere
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               //inicijalizuj id-eve decka
      5 ( 0.00%)     0              0                1 ( 0.00%)     0              0                1 ( 0.00%) 0          0               m_deck.resize(DECKSIZE);
    256 ( 0.00%)     2 ( 0.00%)     1 ( 0.00%)     169 ( 0.00%)     0              0                1 ( 0.00%) 0          0               for(int i = 0; i < DECKSIZE; i++){
    840 ( 0.00%)     0              0              252 ( 0.00%)     0              0              168 ( 0.00%) 0          0                   m_deck[i] = i + 1;
      .              .              .                .              .              .                .          .          .               }
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               //dodati host-a:
      5 ( 0.00%)     0              0                2 ( 0.00%)     0              0                1 ( 0.00%) 0          0               addPlayer(config);
      9 ( 0.00%)     2 ( 0.00%)     1 ( 0.00%)       2 ( 0.00%)     0              0                3 ( 0.00%) 0          0               m_hostId = m_players[0].id();
      .              .              .                .              .              .                .          .          .           
      7 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)       5 ( 0.00%)     0              0                0          0          0           }
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           void Game::addPlayer(Player& p){
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               m_players.push_back(p);
      .              .              .                .              .              .                .          .          .               m_idToPlayer[p.id()] = m_players.size() - 1;
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           }
      .              .              .                .              .              .                .          .          .           
     33 ( 0.00%)     3 ( 0.00%)     3 ( 0.00%)       3 ( 0.00%)     0              0               18 ( 0.00%) 0          0           void Game::addPlayer(const QJsonObject &config){
      .              .              .                .              .              .                .          .          .           
     90 ( 0.00%)     9 ( 0.00%)     9 ( 0.00%)       3 ( 0.00%)     0              0               21 ( 0.00%) 0          0               std::string username = config["userName"].toString().toStdString();
     90 ( 0.00%)     6 ( 0.00%)     6 ( 0.00%)       3 ( 0.00%)     0              0               27 ( 0.00%) 0          0               Player p(username, m_players.size(), 0, {});
     18 ( 0.00%)     0              0                3 ( 0.00%)     0              0                3 ( 0.00%) 0          0               m_players.push_back(p);
     51 ( 0.00%)     6 ( 0.00%)     6 ( 0.00%)       6 ( 0.00%)     0              0               15 ( 0.00%) 0          0               m_idToPlayer[p.id()] = m_players.size() - 1;
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           
     42 ( 0.00%)     3 ( 0.00%)     3 ( 0.00%)      18 ( 0.00%)     0              0                6 ( 0.00%) 0          0           }
      .              .              .                .              .              .                .          .          .           void Game::removePlayer(const QJsonObject &config){
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               int id = config["id"].toInt();
      .              .              .                .              .              .                .          .          .               //std::string userName = config["username"].toString().toStdString();
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               for(int i = 0; i < m_players.size(); i++){
      .              .              .                .              .              .                .          .          .                   if(m_players[i].id() == id){
      .              .              .                .              .              .                .          .          .                       m_players.erase(m_players.begin() + i);
      .              .              .                .              .              .                .          .          .                       break;
      .              .              .                .              .              .                .          .          .                   }
      .              .              .                .              .              .                .          .          .               }
      .              .              .                .              .              .                .          .          .           }
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           
      9 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)       1 ( 0.00%)     0              0                4 ( 0.00%) 0          0           void Game::startGame(){
      .              .              .                .              .              .                .          .          .           
      2 ( 0.00%)     0              0                1 ( 0.00%)     0              0                1 ( 0.00%) 0          0               m_isGameStarted = true;
      3 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)       1 ( 0.00%)     0              0                1 ( 0.00%) 0          0               shuffleDeck();
     13 ( 0.00%)     0              0                2 ( 0.00%)     0              0                3 ( 0.00%) 1 ( 0.00%) 0               m_currNarrator = rand() % numOfPlayers();
     19 ( 0.00%)     2 ( 0.00%)     2 ( 0.00%)       4 ( 0.00%)     0              0                5 ( 0.00%) 0          0               m_currNarratorId = players()[m_currNarrator].id();
      .              .              .                .              .              .                .          .          .           
     22 ( 0.00%)     0              0               13 ( 0.00%)     0              0                1 ( 0.00%) 0          0               for(int i = 0; i < INITIALDEAL; i++)
     18 ( 0.00%)     0              0                6 ( 0.00%)     0              0                6 ( 0.00%) 0          0                   drawCards();
      .              .              .                .              .              .                .          .          .           
     31 ( 0.00%)     2 ( 0.00%)     2 ( 0.00%)       3 ( 0.00%)     0              0                6 ( 0.00%) 0          0               const std::string msg = "Igra je pocela. Narator je " + m_players[m_currNarrator].username() + ".";
     13 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)       1 ( 0.00%)     0              0                3 ( 0.00%) 0          0               notify(msg);
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           
      9 ( 0.00%)     2 ( 0.00%)     1 ( 0.00%)       5 ( 0.00%)     0              0                1 ( 0.00%) 0          0           }
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           //ovo bi moglo da bude private
     84 ( 0.00%)     9 ( 0.00%)     9 ( 0.00%)       0              0              0               42 ( 0.00%) 0          0           void Game::drawCards(){
      .              .              .                .              .              .                .          .          .           
    630 ( 0.00%)     9 ( 0.00%)     9 ( 0.00%)     154 ( 0.00%)     0              0               70 ( 0.00%) 0          0               for(int i = 0; i < m_players.size(); i++){
    672 ( 0.00%)     9 ( 0.00%)     9 ( 0.00%)     168 ( 0.00%)     8 ( 0.00%)     5 ( 0.00%)     126 ( 0.00%) 0          0                   m_players[i].addCard(m_deck.back());
    168 ( 0.00%)     0              0               42 ( 0.00%)     0              0               42 ( 0.00%) 0          0                   m_deck.pop_back();
      .              .              .                .              .              .                .          .          .               }
     70 ( 0.00%)     0              0               42 ( 0.00%)     0              0                0          0          0           }
      .              .              .                .              .              .                .          .          .           
     88 ( 0.00%)    16 ( 0.00%)    16 ( 0.00%)       8 ( 0.00%)     0              0               48 ( 0.00%) 0          0           void Game::narratorChoice(int cardId, const std::string& clue){
      .              .              .                .              .              .                .          .          .           
    104 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      24 ( 0.00%)     8 ( 0.00%)     0               16 ( 0.00%) 0          0               std::vector<int> hand = m_players[m_currNarrator].cards();
    120 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)       0              0              0               24 ( 0.00%) 0          0               assert(std::count(hand.begin(), hand.end(), cardId) > 0);
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               //postavi asocijaciju i naratorovu kartu
     48 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      16 ( 0.00%)     0              0                8 ( 0.00%) 0          0               m_clue = clue;
     24 ( 0.00%)     0              0               16 ( 0.00%)     0              0                8 ( 0.00%) 0          0               m_narratorCard = cardId;
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               //dodaj u commonPile
     80 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      32 ( 0.00%)     0              0               16 ( 0.00%) 0          0               m_commonPile[m_narratorCard] = m_currNarratorId;
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               //izbaci iz ruke
    104 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      32 ( 0.00%)     0              0               16 ( 0.00%) 0          0               m_players[m_currNarrator].discard(cardId);
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               //promeni gamePhase
     16 ( 0.00%)     0              0                8 ( 0.00%)     0              0                8 ( 0.00%) 0          0               m_gamePhase = GamePhase::PLAYERS_CHOOSE;
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               //obavesti ostale da biraju kartu iz ruke
     96 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)       0              0              0               24 ( 0.00%) 0          0               std::string msg = "Odaberite kartu iz ruke.";
    104 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)       8 ( 0.00%)     0              0               24 ( 0.00%) 0          0               notify(msg);
     96 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      40 ( 0.00%)     0              0               16 ( 0.00%) 0          0           }
      .              .              .                .              .              .                .          .          .           
    176 ( 0.00%)    32 ( 0.00%)    32 ( 0.01%)      16 ( 0.00%)     0              0               96 ( 0.00%) 0          0           void Game::playerChoice(int playerId, int cardId){
      .              .              .                .              .              .                .          .          .           
    288 ( 0.00%)    16 ( 0.00%)    16 ( 0.00%)      48 ( 0.00%)     0              0               48 ( 0.00%) 0          0               std::vector<int> hand = m_players[m_idToPlayer[playerId]].cards();
    240 ( 0.00%)    16 ( 0.00%)    16 ( 0.00%)       0              0              0               48 ( 0.00%) 0          0               assert(std::count(hand.begin(), hand.end(), cardId) > 0);
      .              .              .                .              .              .                .          .          .           
    128 ( 0.00%)    16 ( 0.00%)    16 ( 0.00%)      32 ( 0.00%)     0              0               32 ( 0.00%) 0          0               m_commonPile[cardId] = playerId;
      .              .              .                .              .              .                .          .          .           
    288 ( 0.00%)    16 ( 0.00%)    15 ( 0.00%)      64 ( 0.00%)     0              0               48 ( 0.00%) 0          0               m_players[m_idToPlayer[playerId]].discard(cardId);
      .              .              .                .              .              .                .          .          .           
    720 ( 0.00%)    51 ( 0.00%)    39 ( 0.01%)     176 ( 0.00%)     0              0               80 ( 0.00%) 0          0               for(int i = 0; i < m_players.size(); i++){
    672 ( 0.00%)    10 ( 0.00%)     0              144 ( 0.00%)     0              0               96 ( 0.00%) 0          0                   if(m_players[i].id() == playerId){
    480 ( 0.00%)    32 ( 0.00%)    28 ( 0.01%)      32 ( 0.00%)     0              0               96 ( 0.00%) 0          0                      std::string msg = "Igrac " + m_players[i].username() + " je izabrao kartu iz ruke.";
    208 ( 0.00%)     5 ( 0.00%)     5 ( 0.00%)      16 ( 0.00%)     0              0               48 ( 0.00%) 0          0                      notify(msg);
     48 ( 0.00%)     0              0                0              0              0               16 ( 0.00%) 0          0                   }
      .              .              .                .              .              .                .          .          .               }
      .              .              .                .              .              .                .          .          .           
     80 ( 0.00%)    16 ( 0.00%)    14 ( 0.00%)      48 ( 0.00%)     0              0               16 ( 0.00%) 0          0               m_choiceCounter++;
      .              .              .                .              .              .                .          .          .           
    192 ( 0.00%)     0              0               48 ( 0.00%)     0              0               16 ( 0.00%) 0          0               if(m_choiceCounter == m_players.size() - 1){
     16 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)       8 ( 0.00%)     0              0                8 ( 0.00%) 0          0                   m_gamePhase = GamePhase::PLAYERS_VOTE;
     16 ( 0.00%)     0              0                8 ( 0.00%)     0              0                8 ( 0.00%) 0          0                   m_choiceCounter = 0;
     96 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)       0              0              0               24 ( 0.00%) 0          0                   std::string msg = "Vreme je za glasanje.";
    104 ( 0.00%)    14 ( 0.00%)     7 ( 0.00%)       8 ( 0.00%)     0              0               24 ( 0.00%) 0          0                   notify(msg);
     24 ( 0.00%)     0              0                0              0              0                8 ( 0.00%) 0          0               }
    144 ( 0.00%)    24 ( 0.00%)    24 ( 0.01%)      80 ( 0.00%)     0              0               16 ( 0.00%) 0          0           }
      .              .              .                .              .              .                .          .          .           
    176 ( 0.00%)    16 ( 0.00%)    16 ( 0.00%)      16 ( 0.00%)     0              0               96 ( 0.00%) 0          0           void Game::playerVote(int playerId, int cardId){
      .              .              .                .              .              .                .          .          .           
    304 ( 0.00%)    32 ( 0.00%)    32 ( 0.01%)      32 ( 0.00%)     0              0               80 ( 0.00%) 0          0               assert(m_commonPile.find(cardId) != m_commonPile.end());
    128 ( 0.00%)    16 ( 0.00%)    16 ( 0.00%)      32 ( 0.00%)     0              0               32 ( 0.00%) 0          0               m_votes[playerId] = cardId;
      .              .              .                .              .              .                .          .          .           
    720 ( 0.00%)    32 ( 0.00%)    32 ( 0.01%)     176 ( 0.00%)     0              0               80 ( 0.00%) 0          0               for(int i = 0; i < m_players.size(); i++){
    672 ( 0.00%)    36 ( 0.00%)    16 ( 0.00%)     144 ( 0.00%)     0              0               96 ( 0.00%) 0          0                   if(m_players[i].id() == playerId){
    480 ( 0.00%)    32 ( 0.00%)    29 ( 0.01%)      32 ( 0.00%)     0              0               96 ( 0.00%) 0          0                      std::string msg = "Igrac " + m_players[i].username() + " je glasao.";
    208 ( 0.00%)     0              0               16 ( 0.00%)     0              0               48 ( 0.00%) 0          0                      notify(msg);
     48 ( 0.00%)     0              0                0              0              0               16 ( 0.00%) 0          0                   }
      .              .              .                .              .              .                .          .          .               }
     80 ( 0.00%)     0              0               48 ( 0.00%)     0              0               16 ( 0.00%) 0          0               m_voteCounter++;
    192 ( 0.00%)    16 ( 0.00%)    16 ( 0.00%)      48 ( 0.00%)     0              0               16 ( 0.00%) 0          0               if(m_voteCounter == m_players.size() - 1){
     16 ( 0.00%)     0              0                8 ( 0.00%)     0              0                8 ( 0.00%) 0          0                   m_voteCounter = 0;
      .              .              .                .              .              .                .          .          .           
     24 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)       8 ( 0.00%)     0              0                8 ( 0.00%) 0          0                   endTurn();
      .              .              .                .              .              .                .          .          .               }
    120 ( 0.00%)    29 ( 0.00%)    24 ( 0.01%)      80 ( 0.00%)     1 ( 0.00%)     1 ( 0.00%)       0          0          0           }
      .              .              .                .              .              .                .          .          .           
     72 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)       8 ( 0.00%)     0              0               32 ( 0.00%) 0          0           void Game::updatePoints(){
      .              .              .                .              .              .                .          .          .           
      8 ( 0.00%)     0              0                0              0              0                8 ( 0.00%) 0          0               int forNarrator = 0;
      .              .              .                .              .              .                .          .          .           
    360 ( 0.00%)    16 ( 0.00%)    16 ( 0.00%)      88 ( 0.00%)     0              0               40 ( 0.00%) 0          0               for(int i = 0; i < m_players.size(); i++){
      .              .              .                .              .              .                .          .          .                   //ne gledamo za koga je narator glasao, iako svakako ne glasa
     96 ( 0.00%)     0              0               72 ( 0.00%)     8 ( 0.00%)     6 ( 0.00%)       0          0          0                   if(i == m_currNarrator)
      8 ( 0.00%)     0              0                0              0              0                0          0          0                       continue;
      .              .              .                .              .              .                .          .          .           
    288 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      64 ( 0.00%)     0              0               80 ( 0.00%) 0          0                   int chosenCard = m_votes[m_players[i].id()];
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .                   //ako je igrac glasao za naratora
     80 ( 0.00%)     0              0               48 ( 0.00%)     0              0                0          0          0                   if(chosenCard == m_narratorCard)
     20 ( 0.00%)     0              0               10 ( 0.00%)     0              0                0          0          0                       forNarrator++;
      .              .              .                .              .              .                .          .          .                   //ako nije glasao za naratora nego za nekog drugog, taj drugi dobija poene
      .              .              .                .              .              .                .          .          .                   else {
     48 ( 0.00%)     5 ( 0.00%)     5 ( 0.00%)      12 ( 0.00%)     0              0               12 ( 0.00%) 0          0                      int pointsFor = m_commonPile[chosenCard];
    102 ( 0.00%)     0              0               18 ( 0.00%)     0              0               18 ( 0.00%) 0          0                      m_players[m_idToPlayer[pointsFor]].addPoints(1);
      .              .              .                .              .              .                .          .          .                   }
      .              .              .                .              .              .                .          .          .               }
      8 ( 0.00%)     0              0                0              0              0                8 ( 0.00%) 0          0               int pointsForPlayer = MAXPOINTS;
      8 ( 0.00%)     0              0                0              0              0                8 ( 0.00%) 0          0               bool givePointsToNarrator = true;
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               //da li su svi glasali za naratora?
    110 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      21 ( 0.00%)     0              0                8 ( 0.00%) 0          0               if(forNarrator == m_players.size() - 1 || forNarrator == 0){
      4 ( 0.00%)     0              0                4 ( 0.00%)     0              0                0          0          0                   pointsForPlayer--;
      4 ( 0.00%)     0              0                0              0              0                4 ( 0.00%) 0          0                   givePointsToNarrator = false;
      .              .              .                .              .              .                .          .          .               }
      .              .              .                .              .              .                .          .          .               //dodela svima osim naratoru
    360 ( 0.00%)    24 ( 0.00%)    16 ( 0.00%)      88 ( 0.00%)     0              0               40 ( 0.00%) 0          0               for(int i = 0; i < m_players.size(); i++){
     96 ( 0.00%)     0              0               72 ( 0.00%)     0              0                0          0          0                   if(i == m_currNarrator){
      8 ( 0.00%)     0              0                0              0              0                0          0          0                      continue;
      .              .              .                .              .              .                .          .          .                   }
    368 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      96 ( 0.00%)     0              0               64 ( 0.00%) 0          0                   else if(m_votes[m_players[i].id()] == m_narratorCard){
    120 ( 0.00%)     5 ( 0.00%)     5 ( 0.00%)      30 ( 0.00%)     0              0               20 ( 0.00%) 0          0                       m_players[i].addPoints(pointsForPlayer);
     20 ( 0.00%)     0              0               10 ( 0.00%)     0              0                0          0          0                       if(givePointsToNarrator)
     56 ( 0.00%)     0              0               16 ( 0.00%)     0              0                8 ( 0.00%) 0          0                           m_players[m_currNarrator].addPoints(pointsForPlayer);
      .              .              .                .              .              .                .          .          .                   }
     24 ( 0.00%)     3 ( 0.00%)     3 ( 0.00%)       6 ( 0.00%)     0              0                0          0          0                   else if(!givePointsToNarrator){
     26 ( 0.00%)     0              0                6 ( 0.00%)     0              0                4 ( 0.00%) 0          0                       m_players[i].addPoints(pointsForPlayer);
      .              .              .                .              .              .                .          .          .                   }
      .              .              .                .              .              .                .          .          .               }
     56 ( 0.00%)     0              0               40 ( 0.00%)     0              0                0          0          0           }
    810 ( 0.00%)   154 ( 0.00%)    80 ( 0.02%)      81 ( 0.00%)     0              0              405 ( 0.00%) 0          0           void Game::notify(std::string message){
      .              .              .                .              .              .                .          .          .           
    243 ( 0.00%)     0              0                0              0              0               81 ( 0.00%) 0          0               QJsonObject messageInfo;
  3,159 ( 0.00%)   215 ( 0.00%)   118 ( 0.03%)       0              0              0              972 ( 0.00%) 1 ( 0.00%) 1 ( 0.00%)      messageInfo["time"] = QTime::currentTime().toString();
  2,916 ( 0.00%)   123 ( 0.00%)    67 ( 0.02%)       0              0              0              810 ( 0.00%) 0          0               messageInfo["userName"] = QString("Server");
  2,916 ( 0.00%)   162 ( 0.00%)    81 ( 0.02%)      81 ( 0.00%)     0              0              810 ( 0.00%) 0          0               messageInfo["content"] = QString::fromStdString(message);
      .              .              .                .              .              .                .          .          .           
  1,053 ( 0.00%)    81 ( 0.00%)    40 ( 0.01%)      81 ( 0.00%)     0              0              243 ( 0.00%) 0          0               m_chat.addMessage(messageInfo);
      .              .              .                .              .              .                .          .          .           
    729 ( 0.00%)    81 ( 0.00%)    36 ( 0.01%)     405 ( 0.00%)     0              0               81 ( 0.00%) 0          0           }
      .              .              .                .              .              .                .          .          .           
     72 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)       8 ( 0.00%)     0              0               32 ( 0.00%) 0          0           void Game::notifyPlayers(){
      .              .              .                .              .              .                .          .          .           
    360 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      88 ( 0.00%)     0              0               40 ( 0.00%) 0          0               for(int i = 0; i < m_players.size(); i++){
  1,560 ( 0.00%)   104 ( 0.00%)    40 ( 0.01%)      96 ( 0.00%)     0              0              336 ( 0.00%) 0          0                   std::string msg = "Igrac " + m_players[i].username() + " ima " + std::to_string(m_players[i].points()) + " poena.";
    312 ( 0.00%)    24 ( 0.00%)     0               24 ( 0.00%)     0              0               72 ( 0.00%) 0          0                   notify(msg);
     72 ( 0.00%)    24 ( 0.00%)     0                0              0              0               24 ( 0.00%) 0          0               }
      .              .              .                .              .              .                .          .          .           
    248 ( 0.00%)    16 ( 0.00%)    16 ( 0.00%)      24 ( 0.00%)     0              0               48 ( 0.00%) 0          0               std::string msg = "Novi narator je " + m_players[m_currNarrator].username() + ".";
    104 ( 0.00%)    16 ( 0.00%)     8 ( 0.00%)       8 ( 0.00%)     0              0               24 ( 0.00%) 0          0               notify(msg);
     72 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      40 ( 0.00%)     1 ( 0.00%)     0                8 ( 0.00%) 0          0           }
      .              .              .                .              .              .                .          .          .           
     48 ( 0.00%)    16 ( 0.00%)    16 ( 0.00%)       0              0              0               24 ( 0.00%) 0          0           void Game::endTurn(){
      .              .              .                .              .              .                .          .          .           
     24 ( 0.00%)     0              0                8 ( 0.00%)     0              0                8 ( 0.00%) 0          0               updatePoints();
     40 ( 0.00%)     0              0               16 ( 0.00%)     0              0               16 ( 0.00%) 0          0               m_isOver = checkIfOver();
     24 ( 0.00%)     0              0                8 ( 0.00%)     0              0                8 ( 0.00%) 0          0               drawCards();
      .              .              .                .              .              .                .          .          .           
    136 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      32 ( 0.00%)     0              0               16 ( 0.00%) 0          0               m_currNarrator = (m_currNarrator+1) % m_players.size();
     96 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      32 ( 0.00%)     0              0               24 ( 0.00%) 0          0               m_currNarratorId = m_players[m_currNarrator].id();
      .              .              .                .              .              .                .          .          .           
     32 ( 0.00%)     0              0                8 ( 0.00%)     0              0                8 ( 0.00%) 0          0               m_commonPile.clear();
     32 ( 0.00%)     0              0                8 ( 0.00%)     0              0                8 ( 0.00%) 0          0               m_votes.clear();
     16 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)       8 ( 0.00%)     0              0                8 ( 0.00%) 0          0               m_gamePhase = GamePhase::NARRATOR_CHOICE;
     48 ( 0.00%)     0              0                8 ( 0.00%)     0              0                8 ( 0.00%) 0          0               m_clue = "";
     32 ( 0.00%)     0              0               24 ( 0.00%)     0              0                8 ( 0.00%) 0          0               m_prevNarratorCard = m_narratorCard;
     16 ( 0.00%)     0              0                8 ( 0.00%)     0              0                8 ( 0.00%) 0          0               m_narratorCard = -1;
      .              .              .                .              .              .                .          .          .           
     24 ( 0.00%)     0              0                8 ( 0.00%)     0              0                8 ( 0.00%) 0          0               notifyPlayers();
     32 ( 0.00%)     0              0               24 ( 0.00%)     0              0                0          0          0           }
      .              .              .                .              .              .                .          .          .           
     72 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)       8 ( 0.00%)     0              0               32 ( 0.00%) 0          0           bool Game::checkIfOver(){
      .              .              .                .              .              .                .          .          .           
      8 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)       0              0              0                8 ( 0.00%) 0          0               bool check = false;
      .              .              .                .              .              .                .          .          .           
     48 ( 0.00%)     0              0                8 ( 0.00%)     0              0                8 ( 0.00%) 0          0               if(m_deck.empty()){
      .              .              .                .              .              .                .          .          .                   std::string msg = "Iskoriscene su sve karte iz deck-a. Igra je zavrsena.";
      .              .              .                .              .              .                .          .          .                   notify(msg);
      .              .              .                .              .              .                .          .          .                   return true;
      .              .              .                .              .              .                .          .          .               }
      .              .              .                .              .              .                .          .          .               else{
    360 ( 0.00%)    24 ( 0.00%)    24 ( 0.01%)      88 ( 0.00%)     0              0               40 ( 0.00%) 0          0                   for(int i = 0; i < m_players.size(); i++){
    312 ( 0.00%)     8 ( 0.00%)     8 ( 0.00%)      48 ( 0.00%)     0              0               48 ( 0.00%) 0          0                       if(m_players[i].points() >= 30){
      .              .              .                .              .              .                .          .          .                           std::string msg = "Pobednik je " + m_players[i].username() + ".";
      .              .              .                .              .              .                .          .          .                           notify(msg);
      .              .              .                .              .              .                .          .          .                           check = true;
      .              .              .                .              .              .                .          .          .                       }
      .              .              .                .              .              .                .          .          .                   }
     24 ( 0.00%)     0              0                8 ( 0.00%)     0              0                0          0          0                   return check == true;
      .              .              .                .              .              .                .          .          .               }
     56 ( 0.00%)     8 ( 0.00%)     2 ( 0.00%)      40 ( 0.00%)     0              0                0          0          0           }
      .              .              .                .              .              .                .          .          .           
  7,830 ( 0.00%)   783 ( 0.02%)    79 ( 0.02%)     783 ( 0.00%)     0              0            3,915 ( 0.00%) 1 ( 0.00%) 1 ( 0.00%)  QJsonObject Game::toJson(){
      .              .              .                .              .              .                .          .          .           
  2,349 ( 0.00%)   783 ( 0.02%)    16 ( 0.00%)     783 ( 0.00%)     0              0              783 ( 0.00%) 0          0               QJsonObject p;
      .              .              .                .              .              .                .          .          .           
 22,707 ( 0.00%)   783 ( 0.02%)    59 ( 0.02%)   2,349 ( 0.00%)     0              0            6,264 ( 0.00%) 0          0               p["voteCounter"] = QJsonValue(m_voteCounter);
 22,707 ( 0.00%) 1,566 ( 0.03%)   104 ( 0.03%)   2,349 ( 0.00%)     0              0            6,264 ( 0.00%) 0          0               p["choiceCounter"] = QJsonValue(m_choiceCounter);
 23,490 ( 0.00%) 1,566 ( 0.03%)   796 ( 0.23%)   2,349 ( 0.00%)     1 ( 0.00%)     0            6,264 ( 0.00%) 0          0               p["isGameStarted"] = QJsonValue(m_isGameStarted);
 22,707 ( 0.00%) 1,566 ( 0.03%)   814 ( 0.24%)   2,349 ( 0.00%)   746 ( 0.09%)   305 ( 0.13%)   6,264 ( 0.00%) 0          0               p["prevCard"] = QJsonValue(m_prevNarratorCard);
 23,490 ( 0.00%) 1,566 ( 0.03%)   219 ( 0.06%)   2,349 ( 0.00%)     1 ( 0.00%)     0            6,264 ( 0.00%) 0          0               p["isOver"] = QJsonValue(m_isOver);
 22,707 ( 0.00%) 2,349 ( 0.05%)   104 ( 0.03%)   2,349 ( 0.00%)    14 ( 0.00%)     0            6,264 ( 0.00%) 0          0               p["id"] = QJsonValue(m_gameID);
 22,707 ( 0.00%) 2,349 ( 0.05%)    74 ( 0.02%)   2,349 ( 0.00%)     0              0            6,264 ( 0.00%) 0          0               p["hostId"] = QJsonValue(m_hostId);
 35,235 ( 0.00%) 2,349 ( 0.05%)   805 ( 0.24%)   2,349 ( 0.00%)     0              0            9,396 ( 0.00%) 0          0               p["gamePhase"] = QString::fromStdString(gamePhaseToStr(m_gamePhase));
      .              .              .                .              .              .                .          .          .           
  2,349 ( 0.00%)     0              0                0              0              0              783 ( 0.00%) 0          0               QJsonObject serializedPlayers;
 27,972 ( 0.00%)   783 ( 0.02%)   110 ( 0.03%)   8,280 ( 0.00%)     4 ( 0.00%)     0            3,804 ( 0.00%) 2 ( 0.00%) 0               for(size_t i = 0; i < m_players.size(); i++){
 31,332 ( 0.00%)   783 ( 0.02%)   532 ( 0.16%)   4,476 ( 0.00%)     0              0            6,714 ( 0.00%) 0          0                   auto playerId = QString::number(m_players[i].id());
 76,092 ( 0.00%) 1,566 ( 0.03%)   513 ( 0.15%)   4,476 ( 0.00%)     0              0           20,142 ( 0.01%) 0          0                   serializedPlayers[playerId] = m_players[i].toJson();
  6,714 ( 0.00%)     0              0                0              0              0            2,238 ( 0.00%) 0          0               }
 21,924 ( 0.00%) 1,566 ( 0.03%)   368 ( 0.11%)     783 ( 0.00%)     0              0            6,264 ( 0.00%) 0          0               p["players"] = serializedPlayers;
      .              .              .                .              .              .                .          .          .           
 11,650 ( 0.00%)   783 ( 0.02%)     7 ( 0.00%)   2,349 ( 0.00%)    16 ( 0.00%)     0              783 ( 0.00%) 0          0               if(m_players.size() > 0 && m_isGameStarted == true){
      .              .              .                .              .              .                .          .          .           
 26,144 ( 0.00%) 2,064 ( 0.04%) 1,214 ( 0.36%)   2,752 ( 0.00%)    35 ( 0.00%)     0            6,880 ( 0.00%) 0          0                   p["narratorId"] = QJsonValue(m_players[m_currNarrator].id());
      .              .              .                .              .              .                .          .          .               }
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           
 22,707 ( 0.00%) 1,661 ( 0.03%) 1,251 ( 0.37%)   2,349 ( 0.00%)     2 ( 0.00%)     0            6,264 ( 0.00%) 0          0               p["currNarrator"] = QJsonValue(m_currNarrator);
 28,971 ( 0.00%) 1,566 ( 0.03%)   728 ( 0.21%)   1,566 ( 0.00%)     0              0            7,830 ( 0.00%) 0          0               p["clue"] = QString::fromStdString(m_clue);
 22,707 ( 0.00%) 1,566 ( 0.03%)   858 ( 0.25%)   2,349 ( 0.00%)     1 ( 0.00%)     0            6,264 ( 0.00%) 0          0               p["narratorCard"] = QJsonValue(m_narratorCard);
      .              .              .                .              .              .                .          .          .           
  2,349 ( 0.00%)     0              0                0              0              0              783 ( 0.00%) 0          0               QJsonObject serializedCommonPile;
 27,967 ( 0.00%) 2,009 ( 0.04%)   655 ( 0.19%)   2,349 ( 0.00%)     0              0            8,438 ( 0.00%) 0          0               for(auto &p : m_commonPile){
  6,545 ( 0.00%)     0              0            1,870 ( 0.00%)   642 ( 0.07%)   284 ( 0.12%)     935 ( 0.00%) 0          0                   auto cardId = QString::number(p.first);
  5,610 ( 0.00%)     0              0            1,870 ( 0.00%)     0              0              935 ( 0.00%) 0          0                   auto playerId = QJsonValue(p.second);
 11,220 ( 0.00%)   443 ( 0.01%)   145 ( 0.04%)       0              0              0            3,740 ( 0.00%) 0          0                   serializedCommonPile[cardId] = playerId;
  5,610 ( 0.00%)     0              0                0              0              0            1,870 ( 0.00%) 0          0               }
 21,924 ( 0.00%) 1,566 ( 0.03%)   554 ( 0.16%)     783 ( 0.00%)     0              0            6,264 ( 0.00%) 0          0               p["commonPile"] = serializedCommonPile;
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           
  2,349 ( 0.00%)     0              0                0              0              0              783 ( 0.00%) 0          0               QJsonObject serializedVotes;
 16,487 ( 0.00%) 3,247 ( 0.06%) 1,622 ( 0.48%)   2,349 ( 0.00%)     0              0            5,158 ( 0.00%) 1 ( 0.00%) 0               for(auto &p : m_votes){
    805 ( 0.00%)     0              0              230 ( 0.00%)    57 ( 0.01%)    34 ( 0.01%)     115 ( 0.00%) 0          0                   auto playerId = QString::number(p.first);
    690 ( 0.00%)   115 ( 0.00%)    76 ( 0.02%)     230 ( 0.00%)     0              0              115 ( 0.00%) 0          0                   auto cardId = QJsonValue(p.second);
  1,380 ( 0.00%)     0              0                0              0              0              460 ( 0.00%) 0          0                   serializedVotes[playerId] = cardId;
    690 ( 0.00%)   115 ( 0.00%)     0                0              0              0              230 ( 0.00%) 0          0               }
 21,924 ( 0.00%)   783 ( 0.02%)   505 ( 0.15%)     783 ( 0.00%)     0              0            6,264 ( 0.00%) 0          0               p["votes"] = serializedVotes;
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           
  2,349 ( 0.00%)   783 ( 0.02%)   396 ( 0.12%)       0              0              0              783 ( 0.00%) 0          0               QJsonArray serializedDeck;
423,009 ( 0.03%)   783 ( 0.02%)    96 ( 0.03%) 139,959 ( 0.03%)     3 ( 0.00%)     0           47,697 ( 0.02%) 1 ( 0.00%) 0               for(size_t i = 0; i < m_deck.size(); i++){
369,048 ( 0.02%)     0              0          138,393 ( 0.03%) 3,489 ( 0.40%) 1,986 ( 0.86%)  92,262 ( 0.04%) 0          0                   auto cardId = m_deck[i];
599,703 ( 0.04%)     0              0           46,131 ( 0.01%)     0              0          138,393 ( 0.07%) 0          0                   serializedDeck.append(cardId);
      .              .              .                .              .              .                .          .          .               }
 21,924 ( 0.00%) 1,566 ( 0.03%)    95 ( 0.03%)     783 ( 0.00%)     0              0            6,264 ( 0.00%) 1 ( 0.00%) 1 ( 0.00%)      p["deck"] = serializedDeck;
      .              .              .                .              .              .                .          .          .           
  3,915 ( 0.00%)     0              0              783 ( 0.00%)     6 ( 0.00%)     0              783 ( 0.00%) 0          0               QJsonArray serializedChat = m_chat.convertToJson();
 21,924 ( 0.00%) 1,566 ( 0.03%)   411 ( 0.12%)     783 ( 0.00%)     0              0            6,264 ( 0.00%) 0          0               p["chat"] = serializedChat;
 22,707 ( 0.00%) 1,566 ( 0.03%)   472 ( 0.14%)   2,349 ( 0.00%)    30 ( 0.00%)     0            6,264 ( 0.00%) 1 ( 0.00%) 0               p["maxPlayers"] = QJsonValue(m_maxPlayers);
      .              .              .                .              .              .                .          .          .           
  1,566 ( 0.00%)     0              0                0              0              0                0          0          0               return p;
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           
 17,226 ( 0.00%) 2,349 ( 0.05%)   580 ( 0.17%)   4,698 ( 0.00%)    34 ( 0.00%)    34 ( 0.01%)   3,915 ( 0.00%) 0          0           }
      .              .              .                .              .              .                .          .          .           Game* Game::fromJson(const QJsonObject& o){
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               int prevNarratorCard = o["prevCard"].toInt();
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               int voteCounter = o["voteCounter"].toInt();
      .              .              .                .              .              .                .          .          .               int choiceCounter = o["choiceCounter"].toInt();
      .              .              .                .              .              .                .          .          .               bool isOver = o["isOver"].toBool();
      .              .              .                .              .              .                .          .          .               int id = o["id"].toInt();
-- line 386 ----------------------------------------
-- line 447 ----------------------------------------
      .              .              .                .              .              .                .          .          .               g->m_isGameStarted = isGameStarted;
      .              .              .                .              .              .                .          .          .               g->m_voteCounter = voteCounter;
      .              .              .                .              .              .                .          .          .               g->m_choiceCounter = choiceCounter;
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               return g;
      .              .              .                .              .              .                .          .          .           }
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           std::string gamePhaseToStr(GamePhase gamePhase)
  7,830 ( 0.00%)   783 ( 0.02%)    20 ( 0.01%)     783 ( 0.00%)     0              0            3,915 ( 0.00%) 0          0           {
  4,582 ( 0.00%)   616 ( 0.01%)    81 ( 0.02%)   2,291 ( 0.00%)     0              0                0          0          0               switch (gamePhase) {
  4,080 ( 0.00%)   340 ( 0.01%)     1 ( 0.00%)     340 ( 0.00%)     0              0            1,020 ( 0.00%) 0          0                   case GamePhase::NARRATOR_CHOICE :  return "NARRATOR_CHOICE";
  2,004 ( 0.00%)   167 ( 0.00%)     8 ( 0.00%)     167 ( 0.00%)     0              0              501 ( 0.00%) 0          0                   case GamePhase::PLAYERS_VOTE    :  return "PLAYERS_VOTE";
  3,312 ( 0.00%)   276 ( 0.01%)     8 ( 0.00%)     276 ( 0.00%)     0              0              828 ( 0.00%) 0          0                   case GamePhase::PLAYERS_CHOOSE  :  return "PLAYERS_CHOOSE";
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .                   default:
      .              .              .                .              .              .                .          .          .                       break;
      .              .              .                .              .              .                .          .          .               }
      .              .              .                .              .              .                .          .          .               return "";
  6,264 ( 0.00%)   953 ( 0.02%)     2 ( 0.00%)   4,698 ( 0.00%)     0              0                0          0          0           }
      .              .              .                .              .              .                .          .          .           GamePhase strToGamePhase(const std::string strGamePhase){
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .               if(strGamePhase == "NARRATOR_CHOICE")
      .              .              .                .              .              .                .          .          .                   return GamePhase::NARRATOR_CHOICE;
      .              .              .                .              .              .                .          .          .               else if(strGamePhase == "PLAYERS_VOTE")
      .              .              .                .              .              .                .          .          .                   return GamePhase::PLAYERS_VOTE;
      .              .              .                .              .              .                .          .          .               else if(strGamePhase == "PLAYERS_CHOOSE")
      .              .              .                .              .              .                .          .          .                   return GamePhase::PLAYERS_CHOOSE;
      .              .              .                .              .              .                .          .          .               else
      .              .              .                .              .              .                .          .          .                   return GamePhase::NARRATOR_CHOICE; //proveriti sta u ovom slucaju!
      .              .              .                .              .              .                .          .          .           }
      .              .              .                .              .              .                .          .          .           
      .              .              .                .              .              .                .          .          .           
  7,830 ( 0.00%)   783 ( 0.02%)     6 ( 0.00%)     783 ( 0.00%)     0              0            3,915 ( 0.00%) 1 ( 0.00%) 1 ( 0.00%)  std::string Game::toJsonString(){
 10,179 ( 0.00%)   783 ( 0.02%)     1 ( 0.00%)     783 ( 0.00%)     0              0            2,349 ( 0.00%) 0          0               QJsonDocument doc = QJsonDocument(toJson());
  3,915 ( 0.00%)     0              0                0              0              0              783 ( 0.00%) 0          0               QByteArray data = QByteArray(doc.toJson());
  3,915 ( 0.00%)     0              0              783 ( 0.00%)     0              0              783 ( 0.00%) 0          0               std::string dataString = data.toStdString();
  1,566 ( 0.00%)     0              0                0              0              0                0          0          0               return dataString;
 10,179 ( 0.00%)   785 ( 0.02%)   139 ( 0.04%)   4,698 ( 0.00%)   553 ( 0.06%)   528 ( 0.23%)   1,566 ( 0.00%) 0          0           }
      .              .              .                .              .              .                .          .          .           
      5 ( 0.00%)     1 ( 0.00%)     0                0              0              0                3 ( 0.00%) 0          0           void Game::setGameId(int newId){
      3 ( 0.00%)     0              0                2 ( 0.00%)     0              0                1 ( 0.00%) 0          0               m_gameID = newId;
     24 ( 0.00%)     3 ( 0.00%)     3 ( 0.00%)       8 ( 0.00%)     0              0                5 ( 0.00%) 0          0           }

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/11/bits/basic_string.tcc
--------------------------------------------------------------------------------
Ir               I1mr           ILmr         Dr               D1mr        DLmr       Dw               D1mw         DLmw        

-- line 198 ----------------------------------------
      .              .            .                .           .          .                .            .           .           	  }
      .              .            .                .           .          .                .            .           .           
      .              .            .                .           .          .                .            .           .           	_M_set_length(__len);
      .              .            .                .           .          .                .            .           .                 }
      .              .            .                .           .          .                .            .           .           
      .              .            .                .           .          .                .            .           .             template<typename _CharT, typename _Traits, typename _Alloc>
      .              .            .                .           .          .                .            .           .               template<typename _InIterator>
      .              .            .                .           .          .                .            .           .                 void
768,823 ( 0.05%) 1,651 ( 0.03%) 385 ( 0.11%)  69,893 ( 0.01%)  0          0          419,358 ( 0.20%)   0           0                 basic_string<_CharT, _Traits, _Alloc>::
      .              .            .                .           .          .                .            .           .                 _M_construct(_InIterator __beg, _InIterator __end,
      .              .            .                .           .          .                .            .           .           		   std::forward_iterator_tag)
      .              .            .                .           .          .                .            .           .                 {
      .              .            .                .           .          .                .            .           .           	// NB: Not required, but considered best practice.
559,144 ( 0.04%) 1,638 ( 0.03%) 406 ( 0.12%)  69,893 ( 0.01%)  0          0           69,893 ( 0.03%) 542 ( 0.10%) 30 ( 0.01%)  	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
      .              .            .                .           .          .                .            .           .           	  std::__throw_logic_error(__N("basic_string::"
      .              .            .                .           .          .                .            .           .           				       "_M_construct null not valid"));
      .              .            .                .           .          .                .            .           .           
419,358 ( 0.03%)   830 ( 0.02%) 234 ( 0.07%) 139,786 ( 0.03%)  0          0          139,786 ( 0.07%)   0           0           	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
      .              .            .                .           .          .                .            .           .           
209,679 ( 0.01%)     0            0           69,893 ( 0.01%)  0          0                0            0           0           	if (__dnew > size_type(_S_local_capacity))
      .              .            .                .           .          .                .            .           .           	  {
104,423 ( 0.01%)     0            0           18,986 ( 0.00%)  0          0           18,986 ( 0.01%)   0           0           	    _M_data(_M_create(__dnew, size_type(0)));
 47,465 ( 0.00%)    16 ( 0.00%)   0           18,986 ( 0.00%)  0          0            9,493 ( 0.00%)   0           0           	    _M_capacity(__dnew);
      .              .            .                .           .          .                .            .           .           	  }
      .              .            .                .           .          .                .            .           .           
      .              .            .                .           .          .                .            .           .           	// Check for out_of_range and length_error exceptions.
      .              .            .                .           .          .                .            .           .           	__try
629,037 ( 0.04%)   894 ( 0.02%) 454 ( 0.13%) 209,679 ( 0.04%)  0          0          139,786 ( 0.07%)   0           0           	  { this->_S_copy_chars(_M_data(), __beg, __end); }
      .              .            .                .           .          .                .            .           .           	__catch(...)
      .              .            .                .           .          .                .            .           .           	  {
      .              .            .                .           .          .                .            .           .           	    _M_dispose();
      .              .            .                .           .          .                .            .           .           	    __throw_exception_again;
      .              .            .                .           .          .                .            .           .           	  }
      .              .            .                .           .          .                .            .           .           
349,465 ( 0.02%) 3,218 ( 0.06%) 647 ( 0.19%) 139,786 ( 0.03%) 13 ( 0.00%) 0           69,893 ( 0.03%)   0           0           	_M_set_length(__dnew);
489,251 ( 0.03%)   824 ( 0.02%) 661 ( 0.19%) 349,465 ( 0.07%) 24 ( 0.00%) 4 ( 0.00%)       0            0           0                 }
      .              .            .                .           .          .                .            .           .           
      .              .            .                .           .          .                .            .           .             template<typename _CharT, typename _Traits, typename _Alloc>
      .              .            .                .           .          .                .            .           .               void
      .              .            .                .           .          .                .            .           .               basic_string<_CharT, _Traits, _Alloc>::
      .              .            .                .           .          .                .            .           .               _M_construct(size_type __n, _CharT __c)
      .              .            .                .           .          .                .            .           .               {
      .              .            .                .           .          .                .            .           .                 if (__n > size_type(_S_local_capacity))
      .              .            .                .           .          .                .            .           .           	{
-- line 241 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./malloc/./malloc/arena.c
  ./malloc/./malloc/malloc.c
  ./misc/../sysdeps/unix/syscall-template.S
  ./misc/../sysdeps/unix/sysv/linux/epoll_wait.c
  ./socket/../sysdeps/unix/sysv/linux/send.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S

--------------------------------------------------------------------------------
Ir                   I1mr             ILmr            Dr                   D1mr            DLmr           Dw                  D1mw         DLmw         
--------------------------------------------------------------------------------
594,570,724 (38.73%) 106,922 ( 2.13%) 24,459 ( 7.20%) 219,896,756 (46.83%) 14,576 ( 1.67%) 6,695 ( 2.91%) 81,310,631 (38.31%) 860 ( 0.16%) 188 ( 0.09%)  events annotated

